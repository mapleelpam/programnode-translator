/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef AstDumper_H
#define AstDumper_H

#include <TProcessor.h>
#include "SyntaxTree_types.h"

namespace tw { namespace maple { namespace generated {

class AstDumperIf {
 public:
  virtual ~AstDumperIf() {}
  virtual void startProgram(const std::string& version, const int64_t counter) = 0;
  virtual void endProgram() = 0;
  virtual void startPackage(const std::vector<std::string> & id) = 0;
  virtual void endPackage(const std::vector<std::string> & IDs) = 0;
  virtual void executeImport(const std::vector<std::string> & id) = 0;
  virtual void startFunctionDefinition(const bool isAbstract) = 0;
  virtual void functionAttribute(const std::vector<std::string> & attrs) = 0;
  virtual void functionName(const std::string& name, const FunctionType::type func_type) = 0;
  virtual void startFunctionCommon() = 0;
  virtual void startFunctionSignature(const std::string& type) = 0;
  virtual void startFunctionSignatureParameters() = 0;
  virtual void startFunctionSignatureParameterMember(const std::string& name, const std::vector<std::string> & type, const bool has_init, const std::string& init) = 0;
  virtual void endFunctionSignatureParameterMember() = 0;
  virtual void endFunctionSignatureParameters() = 0;
  virtual void endFunctionSignature() = 0;
  virtual void endFunctionCommon() = 0;
  virtual void endFunctionDefinition() = 0;
  virtual void startReturnStatement() = 0;
  virtual void endReturnStatement() = 0;
  virtual void startExprCondition() = 0;
  virtual void endExprCondition() = 0;
  virtual void startIfStatement() = 0;
  virtual void endIfStatement() = 0;
  virtual void startStmtExpression() = 0;
  virtual void endStmtExpression() = 0;
  virtual void startExpressionList() = 0;
  virtual void startCallExpression(const CallExpression& call) = 0;
  virtual void startArgumentList() = 0;
  virtual void startOneArgument() = 0;
  virtual void endOneArgument() = 0;
  virtual void endArgumentList() = 0;
  virtual void endCallExpression() = 0;
  virtual void startBinaryExpression(const BinaryExpression& op) = 0;
  virtual void endBinaryExpression() = 0;
  virtual void startIncrementExpression(const IncrementType::type type, const std::string& token) = 0;
  virtual void endIncrementExpression() = 0;
  virtual void startInstanceOfExpression() = 0;
  virtual void endInstanceOfExpression() = 0;
  virtual void startIsOperator() = 0;
  virtual void endIsOperator() = 0;
  virtual void startAsOperator() = 0;
  virtual void endAsOperator() = 0;
  virtual void startUnaryExpression(const UnaryExpression& op) = 0;
  virtual void endUnaryExpression() = 0;
  virtual void startVariableDeclare(const VariableDeclare& var_decl) = 0;
  virtual void endVariableDeclare() = 0;
  virtual void startAssignment() = 0;
  virtual void endAssignment() = 0;
  virtual void identifierExpression(const Identifier& id) = 0;
  virtual void literalStringExpression(const Literal& str) = 0;
  virtual void literalNumberExpression(const Literal& str) = 0;
  virtual void literalBooleanExpression(const Literal& str) = 0;
  virtual void literalNull() = 0;
  virtual void thisExpression() = 0;
  virtual void endExpressionList() = 0;
  virtual void addImport(const std::vector<std::string> & packages) = 0;
  virtual void startStmtList() = 0;
  virtual void endStmtList() = 0;
  virtual void startScope() = 0;
  virtual void endScope() = 0;
  virtual void startClassDefinition(const ClassDefinition& class_define) = 0;
  virtual void startClassStmt() = 0;
  virtual void endClassStmt() = 0;
  virtual void endClassDefinition() = 0;
  virtual void startMemberExpression() = 0;
  virtual void endMemberExpression() = 0;
  virtual void startForStatement() = 0;
  virtual void startForInit() = 0;
  virtual void endForInit() = 0;
  virtual void startForStep() = 0;
  virtual void endForStep() = 0;
  virtual void endForStatement() = 0;
  virtual void startDoStatement() = 0;
  virtual void endDoStatement() = 0;
  virtual void startWhileStatement() = 0;
  virtual void endWhileStatement() = 0;
  virtual void defineMetaData(const MetaData& metadata) = 0;
};

class AstDumperNull : virtual public AstDumperIf {
 public:
  virtual ~AstDumperNull() {}
  void startProgram(const std::string& /* version */, const int64_t /* counter */) {
    return;
  }
  void endProgram() {
    return;
  }
  void startPackage(const std::vector<std::string> & /* id */) {
    return;
  }
  void endPackage(const std::vector<std::string> & /* IDs */) {
    return;
  }
  void executeImport(const std::vector<std::string> & /* id */) {
    return;
  }
  void startFunctionDefinition(const bool /* isAbstract */) {
    return;
  }
  void functionAttribute(const std::vector<std::string> & /* attrs */) {
    return;
  }
  void functionName(const std::string& /* name */, const FunctionType::type /* func_type */) {
    return;
  }
  void startFunctionCommon() {
    return;
  }
  void startFunctionSignature(const std::string& /* type */) {
    return;
  }
  void startFunctionSignatureParameters() {
    return;
  }
  void startFunctionSignatureParameterMember(const std::string& /* name */, const std::vector<std::string> & /* type */, const bool /* has_init */, const std::string& /* init */) {
    return;
  }
  void endFunctionSignatureParameterMember() {
    return;
  }
  void endFunctionSignatureParameters() {
    return;
  }
  void endFunctionSignature() {
    return;
  }
  void endFunctionCommon() {
    return;
  }
  void endFunctionDefinition() {
    return;
  }
  void startReturnStatement() {
    return;
  }
  void endReturnStatement() {
    return;
  }
  void startExprCondition() {
    return;
  }
  void endExprCondition() {
    return;
  }
  void startIfStatement() {
    return;
  }
  void endIfStatement() {
    return;
  }
  void startStmtExpression() {
    return;
  }
  void endStmtExpression() {
    return;
  }
  void startExpressionList() {
    return;
  }
  void startCallExpression(const CallExpression& /* call */) {
    return;
  }
  void startArgumentList() {
    return;
  }
  void startOneArgument() {
    return;
  }
  void endOneArgument() {
    return;
  }
  void endArgumentList() {
    return;
  }
  void endCallExpression() {
    return;
  }
  void startBinaryExpression(const BinaryExpression& /* op */) {
    return;
  }
  void endBinaryExpression() {
    return;
  }
  void startIncrementExpression(const IncrementType::type /* type */, const std::string& /* token */) {
    return;
  }
  void endIncrementExpression() {
    return;
  }
  void startInstanceOfExpression() {
    return;
  }
  void endInstanceOfExpression() {
    return;
  }
  void startIsOperator() {
    return;
  }
  void endIsOperator() {
    return;
  }
  void startAsOperator() {
    return;
  }
  void endAsOperator() {
    return;
  }
  void startUnaryExpression(const UnaryExpression& /* op */) {
    return;
  }
  void endUnaryExpression() {
    return;
  }
  void startVariableDeclare(const VariableDeclare& /* var_decl */) {
    return;
  }
  void endVariableDeclare() {
    return;
  }
  void startAssignment() {
    return;
  }
  void endAssignment() {
    return;
  }
  void identifierExpression(const Identifier& /* id */) {
    return;
  }
  void literalStringExpression(const Literal& /* str */) {
    return;
  }
  void literalNumberExpression(const Literal& /* str */) {
    return;
  }
  void literalBooleanExpression(const Literal& /* str */) {
    return;
  }
  void literalNull() {
    return;
  }
  void thisExpression() {
    return;
  }
  void endExpressionList() {
    return;
  }
  void addImport(const std::vector<std::string> & /* packages */) {
    return;
  }
  void startStmtList() {
    return;
  }
  void endStmtList() {
    return;
  }
  void startScope() {
    return;
  }
  void endScope() {
    return;
  }
  void startClassDefinition(const ClassDefinition& /* class_define */) {
    return;
  }
  void startClassStmt() {
    return;
  }
  void endClassStmt() {
    return;
  }
  void endClassDefinition() {
    return;
  }
  void startMemberExpression() {
    return;
  }
  void endMemberExpression() {
    return;
  }
  void startForStatement() {
    return;
  }
  void startForInit() {
    return;
  }
  void endForInit() {
    return;
  }
  void startForStep() {
    return;
  }
  void endForStep() {
    return;
  }
  void endForStatement() {
    return;
  }
  void startDoStatement() {
    return;
  }
  void endDoStatement() {
    return;
  }
  void startWhileStatement() {
    return;
  }
  void endWhileStatement() {
    return;
  }
  void defineMetaData(const MetaData& /* metadata */) {
    return;
  }
};

typedef struct _AstDumper_startProgram_args__isset {
  _AstDumper_startProgram_args__isset() : version(false), counter(false) {}
  bool version;
  bool counter;
} _AstDumper_startProgram_args__isset;

class AstDumper_startProgram_args {
 public:

  AstDumper_startProgram_args() : version("0.0.1"), counter(9LL) {
  }

  virtual ~AstDumper_startProgram_args() throw() {}

  std::string version;
  int64_t counter;

  _AstDumper_startProgram_args__isset __isset;

  bool operator == (const AstDumper_startProgram_args & rhs) const
  {
    if (!(version == rhs.version))
      return false;
    if (!(counter == rhs.counter))
      return false;
    return true;
  }
  bool operator != (const AstDumper_startProgram_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startProgram_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startProgram_pargs {
 public:


  virtual ~AstDumper_startProgram_pargs() throw() {}

  const std::string* version;
  const int64_t* counter;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endProgram_args {
 public:

  AstDumper_endProgram_args() {
  }

  virtual ~AstDumper_endProgram_args() throw() {}


  bool operator == (const AstDumper_endProgram_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_endProgram_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endProgram_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endProgram_pargs {
 public:


  virtual ~AstDumper_endProgram_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AstDumper_startPackage_args__isset {
  _AstDumper_startPackage_args__isset() : id(false) {}
  bool id;
} _AstDumper_startPackage_args__isset;

class AstDumper_startPackage_args {
 public:

  AstDumper_startPackage_args() {
  }

  virtual ~AstDumper_startPackage_args() throw() {}

  std::vector<std::string>  id;

  _AstDumper_startPackage_args__isset __isset;

  bool operator == (const AstDumper_startPackage_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const AstDumper_startPackage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startPackage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startPackage_pargs {
 public:


  virtual ~AstDumper_startPackage_pargs() throw() {}

  const std::vector<std::string> * id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AstDumper_endPackage_args__isset {
  _AstDumper_endPackage_args__isset() : IDs(false) {}
  bool IDs;
} _AstDumper_endPackage_args__isset;

class AstDumper_endPackage_args {
 public:

  AstDumper_endPackage_args() {
  }

  virtual ~AstDumper_endPackage_args() throw() {}

  std::vector<std::string>  IDs;

  _AstDumper_endPackage_args__isset __isset;

  bool operator == (const AstDumper_endPackage_args & rhs) const
  {
    if (!(IDs == rhs.IDs))
      return false;
    return true;
  }
  bool operator != (const AstDumper_endPackage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endPackage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endPackage_pargs {
 public:


  virtual ~AstDumper_endPackage_pargs() throw() {}

  const std::vector<std::string> * IDs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AstDumper_executeImport_args__isset {
  _AstDumper_executeImport_args__isset() : id(false) {}
  bool id;
} _AstDumper_executeImport_args__isset;

class AstDumper_executeImport_args {
 public:

  AstDumper_executeImport_args() {
  }

  virtual ~AstDumper_executeImport_args() throw() {}

  std::vector<std::string>  id;

  _AstDumper_executeImport_args__isset __isset;

  bool operator == (const AstDumper_executeImport_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const AstDumper_executeImport_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_executeImport_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_executeImport_pargs {
 public:


  virtual ~AstDumper_executeImport_pargs() throw() {}

  const std::vector<std::string> * id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AstDumper_startFunctionDefinition_args__isset {
  _AstDumper_startFunctionDefinition_args__isset() : isAbstract(false) {}
  bool isAbstract;
} _AstDumper_startFunctionDefinition_args__isset;

class AstDumper_startFunctionDefinition_args {
 public:

  AstDumper_startFunctionDefinition_args() : isAbstract(0) {
  }

  virtual ~AstDumper_startFunctionDefinition_args() throw() {}

  bool isAbstract;

  _AstDumper_startFunctionDefinition_args__isset __isset;

  bool operator == (const AstDumper_startFunctionDefinition_args & rhs) const
  {
    if (!(isAbstract == rhs.isAbstract))
      return false;
    return true;
  }
  bool operator != (const AstDumper_startFunctionDefinition_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startFunctionDefinition_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startFunctionDefinition_pargs {
 public:


  virtual ~AstDumper_startFunctionDefinition_pargs() throw() {}

  const bool* isAbstract;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AstDumper_functionAttribute_args__isset {
  _AstDumper_functionAttribute_args__isset() : attrs(false) {}
  bool attrs;
} _AstDumper_functionAttribute_args__isset;

class AstDumper_functionAttribute_args {
 public:

  AstDumper_functionAttribute_args() {
  }

  virtual ~AstDumper_functionAttribute_args() throw() {}

  std::vector<std::string>  attrs;

  _AstDumper_functionAttribute_args__isset __isset;

  bool operator == (const AstDumper_functionAttribute_args & rhs) const
  {
    if (!(attrs == rhs.attrs))
      return false;
    return true;
  }
  bool operator != (const AstDumper_functionAttribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_functionAttribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_functionAttribute_pargs {
 public:


  virtual ~AstDumper_functionAttribute_pargs() throw() {}

  const std::vector<std::string> * attrs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AstDumper_functionName_args__isset {
  _AstDumper_functionName_args__isset() : name(false), func_type(false) {}
  bool name;
  bool func_type;
} _AstDumper_functionName_args__isset;

class AstDumper_functionName_args {
 public:

  AstDumper_functionName_args() : name("") {
  }

  virtual ~AstDumper_functionName_args() throw() {}

  std::string name;
  FunctionType::type func_type;

  _AstDumper_functionName_args__isset __isset;

  bool operator == (const AstDumper_functionName_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(func_type == rhs.func_type))
      return false;
    return true;
  }
  bool operator != (const AstDumper_functionName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_functionName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_functionName_pargs {
 public:


  virtual ~AstDumper_functionName_pargs() throw() {}

  const std::string* name;
  const FunctionType::type* func_type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startFunctionCommon_args {
 public:

  AstDumper_startFunctionCommon_args() {
  }

  virtual ~AstDumper_startFunctionCommon_args() throw() {}


  bool operator == (const AstDumper_startFunctionCommon_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_startFunctionCommon_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startFunctionCommon_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startFunctionCommon_pargs {
 public:


  virtual ~AstDumper_startFunctionCommon_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AstDumper_startFunctionSignature_args__isset {
  _AstDumper_startFunctionSignature_args__isset() : type(false) {}
  bool type;
} _AstDumper_startFunctionSignature_args__isset;

class AstDumper_startFunctionSignature_args {
 public:

  AstDumper_startFunctionSignature_args() : type("") {
  }

  virtual ~AstDumper_startFunctionSignature_args() throw() {}

  std::string type;

  _AstDumper_startFunctionSignature_args__isset __isset;

  bool operator == (const AstDumper_startFunctionSignature_args & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const AstDumper_startFunctionSignature_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startFunctionSignature_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startFunctionSignature_pargs {
 public:


  virtual ~AstDumper_startFunctionSignature_pargs() throw() {}

  const std::string* type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startFunctionSignatureParameters_args {
 public:

  AstDumper_startFunctionSignatureParameters_args() {
  }

  virtual ~AstDumper_startFunctionSignatureParameters_args() throw() {}


  bool operator == (const AstDumper_startFunctionSignatureParameters_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_startFunctionSignatureParameters_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startFunctionSignatureParameters_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startFunctionSignatureParameters_pargs {
 public:


  virtual ~AstDumper_startFunctionSignatureParameters_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AstDumper_startFunctionSignatureParameterMember_args__isset {
  _AstDumper_startFunctionSignatureParameterMember_args__isset() : name(false), type(false), has_init(false), init(false) {}
  bool name;
  bool type;
  bool has_init;
  bool init;
} _AstDumper_startFunctionSignatureParameterMember_args__isset;

class AstDumper_startFunctionSignatureParameterMember_args {
 public:

  AstDumper_startFunctionSignatureParameterMember_args() : name(""), has_init(0), init("") {
  }

  virtual ~AstDumper_startFunctionSignatureParameterMember_args() throw() {}

  std::string name;
  std::vector<std::string>  type;
  bool has_init;
  std::string init;

  _AstDumper_startFunctionSignatureParameterMember_args__isset __isset;

  bool operator == (const AstDumper_startFunctionSignatureParameterMember_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(has_init == rhs.has_init))
      return false;
    if (!(init == rhs.init))
      return false;
    return true;
  }
  bool operator != (const AstDumper_startFunctionSignatureParameterMember_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startFunctionSignatureParameterMember_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startFunctionSignatureParameterMember_pargs {
 public:


  virtual ~AstDumper_startFunctionSignatureParameterMember_pargs() throw() {}

  const std::string* name;
  const std::vector<std::string> * type;
  const bool* has_init;
  const std::string* init;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endFunctionSignatureParameterMember_args {
 public:

  AstDumper_endFunctionSignatureParameterMember_args() {
  }

  virtual ~AstDumper_endFunctionSignatureParameterMember_args() throw() {}


  bool operator == (const AstDumper_endFunctionSignatureParameterMember_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_endFunctionSignatureParameterMember_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endFunctionSignatureParameterMember_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endFunctionSignatureParameterMember_pargs {
 public:


  virtual ~AstDumper_endFunctionSignatureParameterMember_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endFunctionSignatureParameters_args {
 public:

  AstDumper_endFunctionSignatureParameters_args() {
  }

  virtual ~AstDumper_endFunctionSignatureParameters_args() throw() {}


  bool operator == (const AstDumper_endFunctionSignatureParameters_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_endFunctionSignatureParameters_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endFunctionSignatureParameters_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endFunctionSignatureParameters_pargs {
 public:


  virtual ~AstDumper_endFunctionSignatureParameters_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endFunctionSignature_args {
 public:

  AstDumper_endFunctionSignature_args() {
  }

  virtual ~AstDumper_endFunctionSignature_args() throw() {}


  bool operator == (const AstDumper_endFunctionSignature_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_endFunctionSignature_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endFunctionSignature_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endFunctionSignature_pargs {
 public:


  virtual ~AstDumper_endFunctionSignature_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endFunctionCommon_args {
 public:

  AstDumper_endFunctionCommon_args() {
  }

  virtual ~AstDumper_endFunctionCommon_args() throw() {}


  bool operator == (const AstDumper_endFunctionCommon_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_endFunctionCommon_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endFunctionCommon_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endFunctionCommon_pargs {
 public:


  virtual ~AstDumper_endFunctionCommon_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endFunctionDefinition_args {
 public:

  AstDumper_endFunctionDefinition_args() {
  }

  virtual ~AstDumper_endFunctionDefinition_args() throw() {}


  bool operator == (const AstDumper_endFunctionDefinition_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_endFunctionDefinition_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endFunctionDefinition_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endFunctionDefinition_pargs {
 public:


  virtual ~AstDumper_endFunctionDefinition_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startReturnStatement_args {
 public:

  AstDumper_startReturnStatement_args() {
  }

  virtual ~AstDumper_startReturnStatement_args() throw() {}


  bool operator == (const AstDumper_startReturnStatement_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_startReturnStatement_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startReturnStatement_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startReturnStatement_pargs {
 public:


  virtual ~AstDumper_startReturnStatement_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endReturnStatement_args {
 public:

  AstDumper_endReturnStatement_args() {
  }

  virtual ~AstDumper_endReturnStatement_args() throw() {}


  bool operator == (const AstDumper_endReturnStatement_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_endReturnStatement_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endReturnStatement_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endReturnStatement_pargs {
 public:


  virtual ~AstDumper_endReturnStatement_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startExprCondition_args {
 public:

  AstDumper_startExprCondition_args() {
  }

  virtual ~AstDumper_startExprCondition_args() throw() {}


  bool operator == (const AstDumper_startExprCondition_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_startExprCondition_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startExprCondition_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startExprCondition_pargs {
 public:


  virtual ~AstDumper_startExprCondition_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endExprCondition_args {
 public:

  AstDumper_endExprCondition_args() {
  }

  virtual ~AstDumper_endExprCondition_args() throw() {}


  bool operator == (const AstDumper_endExprCondition_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_endExprCondition_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endExprCondition_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endExprCondition_pargs {
 public:


  virtual ~AstDumper_endExprCondition_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startIfStatement_args {
 public:

  AstDumper_startIfStatement_args() {
  }

  virtual ~AstDumper_startIfStatement_args() throw() {}


  bool operator == (const AstDumper_startIfStatement_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_startIfStatement_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startIfStatement_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startIfStatement_pargs {
 public:


  virtual ~AstDumper_startIfStatement_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endIfStatement_args {
 public:

  AstDumper_endIfStatement_args() {
  }

  virtual ~AstDumper_endIfStatement_args() throw() {}


  bool operator == (const AstDumper_endIfStatement_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_endIfStatement_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endIfStatement_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endIfStatement_pargs {
 public:


  virtual ~AstDumper_endIfStatement_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startStmtExpression_args {
 public:

  AstDumper_startStmtExpression_args() {
  }

  virtual ~AstDumper_startStmtExpression_args() throw() {}


  bool operator == (const AstDumper_startStmtExpression_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_startStmtExpression_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startStmtExpression_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startStmtExpression_pargs {
 public:


  virtual ~AstDumper_startStmtExpression_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endStmtExpression_args {
 public:

  AstDumper_endStmtExpression_args() {
  }

  virtual ~AstDumper_endStmtExpression_args() throw() {}


  bool operator == (const AstDumper_endStmtExpression_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_endStmtExpression_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endStmtExpression_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endStmtExpression_pargs {
 public:


  virtual ~AstDumper_endStmtExpression_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startExpressionList_args {
 public:

  AstDumper_startExpressionList_args() {
  }

  virtual ~AstDumper_startExpressionList_args() throw() {}


  bool operator == (const AstDumper_startExpressionList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_startExpressionList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startExpressionList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startExpressionList_pargs {
 public:


  virtual ~AstDumper_startExpressionList_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AstDumper_startCallExpression_args__isset {
  _AstDumper_startCallExpression_args__isset() : call(false) {}
  bool call;
} _AstDumper_startCallExpression_args__isset;

class AstDumper_startCallExpression_args {
 public:

  AstDumper_startCallExpression_args() {
  }

  virtual ~AstDumper_startCallExpression_args() throw() {}

  CallExpression call;

  _AstDumper_startCallExpression_args__isset __isset;

  bool operator == (const AstDumper_startCallExpression_args & rhs) const
  {
    if (!(call == rhs.call))
      return false;
    return true;
  }
  bool operator != (const AstDumper_startCallExpression_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startCallExpression_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startCallExpression_pargs {
 public:


  virtual ~AstDumper_startCallExpression_pargs() throw() {}

  const CallExpression* call;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startArgumentList_args {
 public:

  AstDumper_startArgumentList_args() {
  }

  virtual ~AstDumper_startArgumentList_args() throw() {}


  bool operator == (const AstDumper_startArgumentList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_startArgumentList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startArgumentList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startArgumentList_pargs {
 public:


  virtual ~AstDumper_startArgumentList_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startOneArgument_args {
 public:

  AstDumper_startOneArgument_args() {
  }

  virtual ~AstDumper_startOneArgument_args() throw() {}


  bool operator == (const AstDumper_startOneArgument_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_startOneArgument_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startOneArgument_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startOneArgument_pargs {
 public:


  virtual ~AstDumper_startOneArgument_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endOneArgument_args {
 public:

  AstDumper_endOneArgument_args() {
  }

  virtual ~AstDumper_endOneArgument_args() throw() {}


  bool operator == (const AstDumper_endOneArgument_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_endOneArgument_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endOneArgument_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endOneArgument_pargs {
 public:


  virtual ~AstDumper_endOneArgument_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endArgumentList_args {
 public:

  AstDumper_endArgumentList_args() {
  }

  virtual ~AstDumper_endArgumentList_args() throw() {}


  bool operator == (const AstDumper_endArgumentList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_endArgumentList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endArgumentList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endArgumentList_pargs {
 public:


  virtual ~AstDumper_endArgumentList_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endCallExpression_args {
 public:

  AstDumper_endCallExpression_args() {
  }

  virtual ~AstDumper_endCallExpression_args() throw() {}


  bool operator == (const AstDumper_endCallExpression_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_endCallExpression_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endCallExpression_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endCallExpression_pargs {
 public:


  virtual ~AstDumper_endCallExpression_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AstDumper_startBinaryExpression_args__isset {
  _AstDumper_startBinaryExpression_args__isset() : op(false) {}
  bool op;
} _AstDumper_startBinaryExpression_args__isset;

class AstDumper_startBinaryExpression_args {
 public:

  AstDumper_startBinaryExpression_args() {
  }

  virtual ~AstDumper_startBinaryExpression_args() throw() {}

  BinaryExpression op;

  _AstDumper_startBinaryExpression_args__isset __isset;

  bool operator == (const AstDumper_startBinaryExpression_args & rhs) const
  {
    if (!(op == rhs.op))
      return false;
    return true;
  }
  bool operator != (const AstDumper_startBinaryExpression_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startBinaryExpression_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startBinaryExpression_pargs {
 public:


  virtual ~AstDumper_startBinaryExpression_pargs() throw() {}

  const BinaryExpression* op;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endBinaryExpression_args {
 public:

  AstDumper_endBinaryExpression_args() {
  }

  virtual ~AstDumper_endBinaryExpression_args() throw() {}


  bool operator == (const AstDumper_endBinaryExpression_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_endBinaryExpression_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endBinaryExpression_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endBinaryExpression_pargs {
 public:


  virtual ~AstDumper_endBinaryExpression_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AstDumper_startIncrementExpression_args__isset {
  _AstDumper_startIncrementExpression_args__isset() : type(false), token(false) {}
  bool type;
  bool token;
} _AstDumper_startIncrementExpression_args__isset;

class AstDumper_startIncrementExpression_args {
 public:

  AstDumper_startIncrementExpression_args() : token("") {
  }

  virtual ~AstDumper_startIncrementExpression_args() throw() {}

  IncrementType::type type;
  std::string token;

  _AstDumper_startIncrementExpression_args__isset __isset;

  bool operator == (const AstDumper_startIncrementExpression_args & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const AstDumper_startIncrementExpression_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startIncrementExpression_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startIncrementExpression_pargs {
 public:


  virtual ~AstDumper_startIncrementExpression_pargs() throw() {}

  const IncrementType::type* type;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endIncrementExpression_args {
 public:

  AstDumper_endIncrementExpression_args() {
  }

  virtual ~AstDumper_endIncrementExpression_args() throw() {}


  bool operator == (const AstDumper_endIncrementExpression_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_endIncrementExpression_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endIncrementExpression_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endIncrementExpression_pargs {
 public:


  virtual ~AstDumper_endIncrementExpression_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startInstanceOfExpression_args {
 public:

  AstDumper_startInstanceOfExpression_args() {
  }

  virtual ~AstDumper_startInstanceOfExpression_args() throw() {}


  bool operator == (const AstDumper_startInstanceOfExpression_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_startInstanceOfExpression_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startInstanceOfExpression_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startInstanceOfExpression_pargs {
 public:


  virtual ~AstDumper_startInstanceOfExpression_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endInstanceOfExpression_args {
 public:

  AstDumper_endInstanceOfExpression_args() {
  }

  virtual ~AstDumper_endInstanceOfExpression_args() throw() {}


  bool operator == (const AstDumper_endInstanceOfExpression_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_endInstanceOfExpression_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endInstanceOfExpression_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endInstanceOfExpression_pargs {
 public:


  virtual ~AstDumper_endInstanceOfExpression_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startIsOperator_args {
 public:

  AstDumper_startIsOperator_args() {
  }

  virtual ~AstDumper_startIsOperator_args() throw() {}


  bool operator == (const AstDumper_startIsOperator_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_startIsOperator_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startIsOperator_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startIsOperator_pargs {
 public:


  virtual ~AstDumper_startIsOperator_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endIsOperator_args {
 public:

  AstDumper_endIsOperator_args() {
  }

  virtual ~AstDumper_endIsOperator_args() throw() {}


  bool operator == (const AstDumper_endIsOperator_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_endIsOperator_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endIsOperator_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endIsOperator_pargs {
 public:


  virtual ~AstDumper_endIsOperator_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startAsOperator_args {
 public:

  AstDumper_startAsOperator_args() {
  }

  virtual ~AstDumper_startAsOperator_args() throw() {}


  bool operator == (const AstDumper_startAsOperator_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_startAsOperator_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startAsOperator_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startAsOperator_pargs {
 public:


  virtual ~AstDumper_startAsOperator_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endAsOperator_args {
 public:

  AstDumper_endAsOperator_args() {
  }

  virtual ~AstDumper_endAsOperator_args() throw() {}


  bool operator == (const AstDumper_endAsOperator_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_endAsOperator_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endAsOperator_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endAsOperator_pargs {
 public:


  virtual ~AstDumper_endAsOperator_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AstDumper_startUnaryExpression_args__isset {
  _AstDumper_startUnaryExpression_args__isset() : op(false) {}
  bool op;
} _AstDumper_startUnaryExpression_args__isset;

class AstDumper_startUnaryExpression_args {
 public:

  AstDumper_startUnaryExpression_args() {
  }

  virtual ~AstDumper_startUnaryExpression_args() throw() {}

  UnaryExpression op;

  _AstDumper_startUnaryExpression_args__isset __isset;

  bool operator == (const AstDumper_startUnaryExpression_args & rhs) const
  {
    if (!(op == rhs.op))
      return false;
    return true;
  }
  bool operator != (const AstDumper_startUnaryExpression_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startUnaryExpression_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startUnaryExpression_pargs {
 public:


  virtual ~AstDumper_startUnaryExpression_pargs() throw() {}

  const UnaryExpression* op;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endUnaryExpression_args {
 public:

  AstDumper_endUnaryExpression_args() {
  }

  virtual ~AstDumper_endUnaryExpression_args() throw() {}


  bool operator == (const AstDumper_endUnaryExpression_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_endUnaryExpression_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endUnaryExpression_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endUnaryExpression_pargs {
 public:


  virtual ~AstDumper_endUnaryExpression_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AstDumper_startVariableDeclare_args__isset {
  _AstDumper_startVariableDeclare_args__isset() : var_decl(false) {}
  bool var_decl;
} _AstDumper_startVariableDeclare_args__isset;

class AstDumper_startVariableDeclare_args {
 public:

  AstDumper_startVariableDeclare_args() {
  }

  virtual ~AstDumper_startVariableDeclare_args() throw() {}

  VariableDeclare var_decl;

  _AstDumper_startVariableDeclare_args__isset __isset;

  bool operator == (const AstDumper_startVariableDeclare_args & rhs) const
  {
    if (!(var_decl == rhs.var_decl))
      return false;
    return true;
  }
  bool operator != (const AstDumper_startVariableDeclare_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startVariableDeclare_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startVariableDeclare_pargs {
 public:


  virtual ~AstDumper_startVariableDeclare_pargs() throw() {}

  const VariableDeclare* var_decl;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endVariableDeclare_args {
 public:

  AstDumper_endVariableDeclare_args() {
  }

  virtual ~AstDumper_endVariableDeclare_args() throw() {}


  bool operator == (const AstDumper_endVariableDeclare_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_endVariableDeclare_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endVariableDeclare_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endVariableDeclare_pargs {
 public:


  virtual ~AstDumper_endVariableDeclare_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startAssignment_args {
 public:

  AstDumper_startAssignment_args() {
  }

  virtual ~AstDumper_startAssignment_args() throw() {}


  bool operator == (const AstDumper_startAssignment_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_startAssignment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startAssignment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startAssignment_pargs {
 public:


  virtual ~AstDumper_startAssignment_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endAssignment_args {
 public:

  AstDumper_endAssignment_args() {
  }

  virtual ~AstDumper_endAssignment_args() throw() {}


  bool operator == (const AstDumper_endAssignment_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_endAssignment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endAssignment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endAssignment_pargs {
 public:


  virtual ~AstDumper_endAssignment_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AstDumper_identifierExpression_args__isset {
  _AstDumper_identifierExpression_args__isset() : id(false) {}
  bool id;
} _AstDumper_identifierExpression_args__isset;

class AstDumper_identifierExpression_args {
 public:

  AstDumper_identifierExpression_args() {
  }

  virtual ~AstDumper_identifierExpression_args() throw() {}

  Identifier id;

  _AstDumper_identifierExpression_args__isset __isset;

  bool operator == (const AstDumper_identifierExpression_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const AstDumper_identifierExpression_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_identifierExpression_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_identifierExpression_pargs {
 public:


  virtual ~AstDumper_identifierExpression_pargs() throw() {}

  const Identifier* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AstDumper_literalStringExpression_args__isset {
  _AstDumper_literalStringExpression_args__isset() : str(false) {}
  bool str;
} _AstDumper_literalStringExpression_args__isset;

class AstDumper_literalStringExpression_args {
 public:

  AstDumper_literalStringExpression_args() {
  }

  virtual ~AstDumper_literalStringExpression_args() throw() {}

  Literal str;

  _AstDumper_literalStringExpression_args__isset __isset;

  bool operator == (const AstDumper_literalStringExpression_args & rhs) const
  {
    if (!(str == rhs.str))
      return false;
    return true;
  }
  bool operator != (const AstDumper_literalStringExpression_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_literalStringExpression_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_literalStringExpression_pargs {
 public:


  virtual ~AstDumper_literalStringExpression_pargs() throw() {}

  const Literal* str;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AstDumper_literalNumberExpression_args__isset {
  _AstDumper_literalNumberExpression_args__isset() : str(false) {}
  bool str;
} _AstDumper_literalNumberExpression_args__isset;

class AstDumper_literalNumberExpression_args {
 public:

  AstDumper_literalNumberExpression_args() {
  }

  virtual ~AstDumper_literalNumberExpression_args() throw() {}

  Literal str;

  _AstDumper_literalNumberExpression_args__isset __isset;

  bool operator == (const AstDumper_literalNumberExpression_args & rhs) const
  {
    if (!(str == rhs.str))
      return false;
    return true;
  }
  bool operator != (const AstDumper_literalNumberExpression_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_literalNumberExpression_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_literalNumberExpression_pargs {
 public:


  virtual ~AstDumper_literalNumberExpression_pargs() throw() {}

  const Literal* str;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AstDumper_literalBooleanExpression_args__isset {
  _AstDumper_literalBooleanExpression_args__isset() : str(false) {}
  bool str;
} _AstDumper_literalBooleanExpression_args__isset;

class AstDumper_literalBooleanExpression_args {
 public:

  AstDumper_literalBooleanExpression_args() {
  }

  virtual ~AstDumper_literalBooleanExpression_args() throw() {}

  Literal str;

  _AstDumper_literalBooleanExpression_args__isset __isset;

  bool operator == (const AstDumper_literalBooleanExpression_args & rhs) const
  {
    if (!(str == rhs.str))
      return false;
    return true;
  }
  bool operator != (const AstDumper_literalBooleanExpression_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_literalBooleanExpression_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_literalBooleanExpression_pargs {
 public:


  virtual ~AstDumper_literalBooleanExpression_pargs() throw() {}

  const Literal* str;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_literalNull_args {
 public:

  AstDumper_literalNull_args() {
  }

  virtual ~AstDumper_literalNull_args() throw() {}


  bool operator == (const AstDumper_literalNull_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_literalNull_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_literalNull_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_literalNull_pargs {
 public:


  virtual ~AstDumper_literalNull_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_thisExpression_args {
 public:

  AstDumper_thisExpression_args() {
  }

  virtual ~AstDumper_thisExpression_args() throw() {}


  bool operator == (const AstDumper_thisExpression_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_thisExpression_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_thisExpression_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_thisExpression_pargs {
 public:


  virtual ~AstDumper_thisExpression_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endExpressionList_args {
 public:

  AstDumper_endExpressionList_args() {
  }

  virtual ~AstDumper_endExpressionList_args() throw() {}


  bool operator == (const AstDumper_endExpressionList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_endExpressionList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endExpressionList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endExpressionList_pargs {
 public:


  virtual ~AstDumper_endExpressionList_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AstDumper_addImport_args__isset {
  _AstDumper_addImport_args__isset() : packages(false) {}
  bool packages;
} _AstDumper_addImport_args__isset;

class AstDumper_addImport_args {
 public:

  AstDumper_addImport_args() {
  }

  virtual ~AstDumper_addImport_args() throw() {}

  std::vector<std::string>  packages;

  _AstDumper_addImport_args__isset __isset;

  bool operator == (const AstDumper_addImport_args & rhs) const
  {
    if (!(packages == rhs.packages))
      return false;
    return true;
  }
  bool operator != (const AstDumper_addImport_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_addImport_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_addImport_pargs {
 public:


  virtual ~AstDumper_addImport_pargs() throw() {}

  const std::vector<std::string> * packages;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startStmtList_args {
 public:

  AstDumper_startStmtList_args() {
  }

  virtual ~AstDumper_startStmtList_args() throw() {}


  bool operator == (const AstDumper_startStmtList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_startStmtList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startStmtList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startStmtList_pargs {
 public:


  virtual ~AstDumper_startStmtList_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endStmtList_args {
 public:

  AstDumper_endStmtList_args() {
  }

  virtual ~AstDumper_endStmtList_args() throw() {}


  bool operator == (const AstDumper_endStmtList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_endStmtList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endStmtList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endStmtList_pargs {
 public:


  virtual ~AstDumper_endStmtList_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startScope_args {
 public:

  AstDumper_startScope_args() {
  }

  virtual ~AstDumper_startScope_args() throw() {}


  bool operator == (const AstDumper_startScope_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_startScope_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startScope_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startScope_pargs {
 public:


  virtual ~AstDumper_startScope_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endScope_args {
 public:

  AstDumper_endScope_args() {
  }

  virtual ~AstDumper_endScope_args() throw() {}


  bool operator == (const AstDumper_endScope_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_endScope_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endScope_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endScope_pargs {
 public:


  virtual ~AstDumper_endScope_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AstDumper_startClassDefinition_args__isset {
  _AstDumper_startClassDefinition_args__isset() : class_define(false) {}
  bool class_define;
} _AstDumper_startClassDefinition_args__isset;

class AstDumper_startClassDefinition_args {
 public:

  AstDumper_startClassDefinition_args() {
  }

  virtual ~AstDumper_startClassDefinition_args() throw() {}

  ClassDefinition class_define;

  _AstDumper_startClassDefinition_args__isset __isset;

  bool operator == (const AstDumper_startClassDefinition_args & rhs) const
  {
    if (!(class_define == rhs.class_define))
      return false;
    return true;
  }
  bool operator != (const AstDumper_startClassDefinition_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startClassDefinition_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startClassDefinition_pargs {
 public:


  virtual ~AstDumper_startClassDefinition_pargs() throw() {}

  const ClassDefinition* class_define;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startClassStmt_args {
 public:

  AstDumper_startClassStmt_args() {
  }

  virtual ~AstDumper_startClassStmt_args() throw() {}


  bool operator == (const AstDumper_startClassStmt_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_startClassStmt_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startClassStmt_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startClassStmt_pargs {
 public:


  virtual ~AstDumper_startClassStmt_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endClassStmt_args {
 public:

  AstDumper_endClassStmt_args() {
  }

  virtual ~AstDumper_endClassStmt_args() throw() {}


  bool operator == (const AstDumper_endClassStmt_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_endClassStmt_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endClassStmt_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endClassStmt_pargs {
 public:


  virtual ~AstDumper_endClassStmt_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endClassDefinition_args {
 public:

  AstDumper_endClassDefinition_args() {
  }

  virtual ~AstDumper_endClassDefinition_args() throw() {}


  bool operator == (const AstDumper_endClassDefinition_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_endClassDefinition_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endClassDefinition_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endClassDefinition_pargs {
 public:


  virtual ~AstDumper_endClassDefinition_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startMemberExpression_args {
 public:

  AstDumper_startMemberExpression_args() {
  }

  virtual ~AstDumper_startMemberExpression_args() throw() {}


  bool operator == (const AstDumper_startMemberExpression_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_startMemberExpression_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startMemberExpression_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startMemberExpression_pargs {
 public:


  virtual ~AstDumper_startMemberExpression_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endMemberExpression_args {
 public:

  AstDumper_endMemberExpression_args() {
  }

  virtual ~AstDumper_endMemberExpression_args() throw() {}


  bool operator == (const AstDumper_endMemberExpression_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_endMemberExpression_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endMemberExpression_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endMemberExpression_pargs {
 public:


  virtual ~AstDumper_endMemberExpression_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startForStatement_args {
 public:

  AstDumper_startForStatement_args() {
  }

  virtual ~AstDumper_startForStatement_args() throw() {}


  bool operator == (const AstDumper_startForStatement_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_startForStatement_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startForStatement_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startForStatement_pargs {
 public:


  virtual ~AstDumper_startForStatement_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startForInit_args {
 public:

  AstDumper_startForInit_args() {
  }

  virtual ~AstDumper_startForInit_args() throw() {}


  bool operator == (const AstDumper_startForInit_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_startForInit_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startForInit_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startForInit_pargs {
 public:


  virtual ~AstDumper_startForInit_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endForInit_args {
 public:

  AstDumper_endForInit_args() {
  }

  virtual ~AstDumper_endForInit_args() throw() {}


  bool operator == (const AstDumper_endForInit_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_endForInit_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endForInit_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endForInit_pargs {
 public:


  virtual ~AstDumper_endForInit_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startForStep_args {
 public:

  AstDumper_startForStep_args() {
  }

  virtual ~AstDumper_startForStep_args() throw() {}


  bool operator == (const AstDumper_startForStep_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_startForStep_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startForStep_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startForStep_pargs {
 public:


  virtual ~AstDumper_startForStep_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endForStep_args {
 public:

  AstDumper_endForStep_args() {
  }

  virtual ~AstDumper_endForStep_args() throw() {}


  bool operator == (const AstDumper_endForStep_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_endForStep_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endForStep_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endForStep_pargs {
 public:


  virtual ~AstDumper_endForStep_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endForStatement_args {
 public:

  AstDumper_endForStatement_args() {
  }

  virtual ~AstDumper_endForStatement_args() throw() {}


  bool operator == (const AstDumper_endForStatement_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_endForStatement_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endForStatement_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endForStatement_pargs {
 public:


  virtual ~AstDumper_endForStatement_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startDoStatement_args {
 public:

  AstDumper_startDoStatement_args() {
  }

  virtual ~AstDumper_startDoStatement_args() throw() {}


  bool operator == (const AstDumper_startDoStatement_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_startDoStatement_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startDoStatement_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startDoStatement_pargs {
 public:


  virtual ~AstDumper_startDoStatement_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endDoStatement_args {
 public:

  AstDumper_endDoStatement_args() {
  }

  virtual ~AstDumper_endDoStatement_args() throw() {}


  bool operator == (const AstDumper_endDoStatement_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_endDoStatement_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endDoStatement_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endDoStatement_pargs {
 public:


  virtual ~AstDumper_endDoStatement_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startWhileStatement_args {
 public:

  AstDumper_startWhileStatement_args() {
  }

  virtual ~AstDumper_startWhileStatement_args() throw() {}


  bool operator == (const AstDumper_startWhileStatement_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_startWhileStatement_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startWhileStatement_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startWhileStatement_pargs {
 public:


  virtual ~AstDumper_startWhileStatement_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endWhileStatement_args {
 public:

  AstDumper_endWhileStatement_args() {
  }

  virtual ~AstDumper_endWhileStatement_args() throw() {}


  bool operator == (const AstDumper_endWhileStatement_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_endWhileStatement_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endWhileStatement_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endWhileStatement_pargs {
 public:


  virtual ~AstDumper_endWhileStatement_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AstDumper_defineMetaData_args__isset {
  _AstDumper_defineMetaData_args__isset() : metadata(false) {}
  bool metadata;
} _AstDumper_defineMetaData_args__isset;

class AstDumper_defineMetaData_args {
 public:

  AstDumper_defineMetaData_args() {
  }

  virtual ~AstDumper_defineMetaData_args() throw() {}

  MetaData metadata;

  _AstDumper_defineMetaData_args__isset __isset;

  bool operator == (const AstDumper_defineMetaData_args & rhs) const
  {
    if (!(metadata == rhs.metadata))
      return false;
    return true;
  }
  bool operator != (const AstDumper_defineMetaData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_defineMetaData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_defineMetaData_pargs {
 public:


  virtual ~AstDumper_defineMetaData_pargs() throw() {}

  const MetaData* metadata;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class AstDumperClient : virtual public AstDumperIf {
 public:
  AstDumperClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  AstDumperClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void startProgram(const std::string& version, const int64_t counter);
  void send_startProgram(const std::string& version, const int64_t counter);
  void endProgram();
  void send_endProgram();
  void startPackage(const std::vector<std::string> & id);
  void send_startPackage(const std::vector<std::string> & id);
  void endPackage(const std::vector<std::string> & IDs);
  void send_endPackage(const std::vector<std::string> & IDs);
  void executeImport(const std::vector<std::string> & id);
  void send_executeImport(const std::vector<std::string> & id);
  void startFunctionDefinition(const bool isAbstract);
  void send_startFunctionDefinition(const bool isAbstract);
  void functionAttribute(const std::vector<std::string> & attrs);
  void send_functionAttribute(const std::vector<std::string> & attrs);
  void functionName(const std::string& name, const FunctionType::type func_type);
  void send_functionName(const std::string& name, const FunctionType::type func_type);
  void startFunctionCommon();
  void send_startFunctionCommon();
  void startFunctionSignature(const std::string& type);
  void send_startFunctionSignature(const std::string& type);
  void startFunctionSignatureParameters();
  void send_startFunctionSignatureParameters();
  void startFunctionSignatureParameterMember(const std::string& name, const std::vector<std::string> & type, const bool has_init, const std::string& init);
  void send_startFunctionSignatureParameterMember(const std::string& name, const std::vector<std::string> & type, const bool has_init, const std::string& init);
  void endFunctionSignatureParameterMember();
  void send_endFunctionSignatureParameterMember();
  void endFunctionSignatureParameters();
  void send_endFunctionSignatureParameters();
  void endFunctionSignature();
  void send_endFunctionSignature();
  void endFunctionCommon();
  void send_endFunctionCommon();
  void endFunctionDefinition();
  void send_endFunctionDefinition();
  void startReturnStatement();
  void send_startReturnStatement();
  void endReturnStatement();
  void send_endReturnStatement();
  void startExprCondition();
  void send_startExprCondition();
  void endExprCondition();
  void send_endExprCondition();
  void startIfStatement();
  void send_startIfStatement();
  void endIfStatement();
  void send_endIfStatement();
  void startStmtExpression();
  void send_startStmtExpression();
  void endStmtExpression();
  void send_endStmtExpression();
  void startExpressionList();
  void send_startExpressionList();
  void startCallExpression(const CallExpression& call);
  void send_startCallExpression(const CallExpression& call);
  void startArgumentList();
  void send_startArgumentList();
  void startOneArgument();
  void send_startOneArgument();
  void endOneArgument();
  void send_endOneArgument();
  void endArgumentList();
  void send_endArgumentList();
  void endCallExpression();
  void send_endCallExpression();
  void startBinaryExpression(const BinaryExpression& op);
  void send_startBinaryExpression(const BinaryExpression& op);
  void endBinaryExpression();
  void send_endBinaryExpression();
  void startIncrementExpression(const IncrementType::type type, const std::string& token);
  void send_startIncrementExpression(const IncrementType::type type, const std::string& token);
  void endIncrementExpression();
  void send_endIncrementExpression();
  void startInstanceOfExpression();
  void send_startInstanceOfExpression();
  void endInstanceOfExpression();
  void send_endInstanceOfExpression();
  void startIsOperator();
  void send_startIsOperator();
  void endIsOperator();
  void send_endIsOperator();
  void startAsOperator();
  void send_startAsOperator();
  void endAsOperator();
  void send_endAsOperator();
  void startUnaryExpression(const UnaryExpression& op);
  void send_startUnaryExpression(const UnaryExpression& op);
  void endUnaryExpression();
  void send_endUnaryExpression();
  void startVariableDeclare(const VariableDeclare& var_decl);
  void send_startVariableDeclare(const VariableDeclare& var_decl);
  void endVariableDeclare();
  void send_endVariableDeclare();
  void startAssignment();
  void send_startAssignment();
  void endAssignment();
  void send_endAssignment();
  void identifierExpression(const Identifier& id);
  void send_identifierExpression(const Identifier& id);
  void literalStringExpression(const Literal& str);
  void send_literalStringExpression(const Literal& str);
  void literalNumberExpression(const Literal& str);
  void send_literalNumberExpression(const Literal& str);
  void literalBooleanExpression(const Literal& str);
  void send_literalBooleanExpression(const Literal& str);
  void literalNull();
  void send_literalNull();
  void thisExpression();
  void send_thisExpression();
  void endExpressionList();
  void send_endExpressionList();
  void addImport(const std::vector<std::string> & packages);
  void send_addImport(const std::vector<std::string> & packages);
  void startStmtList();
  void send_startStmtList();
  void endStmtList();
  void send_endStmtList();
  void startScope();
  void send_startScope();
  void endScope();
  void send_endScope();
  void startClassDefinition(const ClassDefinition& class_define);
  void send_startClassDefinition(const ClassDefinition& class_define);
  void startClassStmt();
  void send_startClassStmt();
  void endClassStmt();
  void send_endClassStmt();
  void endClassDefinition();
  void send_endClassDefinition();
  void startMemberExpression();
  void send_startMemberExpression();
  void endMemberExpression();
  void send_endMemberExpression();
  void startForStatement();
  void send_startForStatement();
  void startForInit();
  void send_startForInit();
  void endForInit();
  void send_endForInit();
  void startForStep();
  void send_startForStep();
  void endForStep();
  void send_endForStep();
  void endForStatement();
  void send_endForStatement();
  void startDoStatement();
  void send_startDoStatement();
  void endDoStatement();
  void send_endDoStatement();
  void startWhileStatement();
  void send_startWhileStatement();
  void endWhileStatement();
  void send_endWhileStatement();
  void defineMetaData(const MetaData& metadata);
  void send_defineMetaData(const MetaData& metadata);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class AstDumperProcessor : virtual public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<AstDumperIf> iface_;
  virtual bool process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (AstDumperProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_startProgram(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endProgram(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startPackage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endPackage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_executeImport(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startFunctionDefinition(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_functionAttribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_functionName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startFunctionCommon(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startFunctionSignature(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startFunctionSignatureParameters(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startFunctionSignatureParameterMember(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endFunctionSignatureParameterMember(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endFunctionSignatureParameters(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endFunctionSignature(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endFunctionCommon(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endFunctionDefinition(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startReturnStatement(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endReturnStatement(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startExprCondition(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endExprCondition(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startIfStatement(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endIfStatement(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startStmtExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endStmtExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startExpressionList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startCallExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startArgumentList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startOneArgument(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endOneArgument(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endArgumentList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endCallExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startBinaryExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endBinaryExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startIncrementExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endIncrementExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startInstanceOfExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endInstanceOfExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startIsOperator(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endIsOperator(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startAsOperator(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endAsOperator(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startUnaryExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endUnaryExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startVariableDeclare(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endVariableDeclare(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startAssignment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endAssignment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_identifierExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_literalStringExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_literalNumberExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_literalBooleanExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_literalNull(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_thisExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endExpressionList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addImport(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startStmtList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endStmtList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startScope(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endScope(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startClassDefinition(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startClassStmt(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endClassStmt(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endClassDefinition(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startMemberExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endMemberExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startForStatement(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startForInit(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endForInit(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startForStep(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endForStep(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endForStatement(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startDoStatement(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endDoStatement(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startWhileStatement(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endWhileStatement(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_defineMetaData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  AstDumperProcessor(boost::shared_ptr<AstDumperIf> iface) :
    iface_(iface) {
    processMap_["startProgram"] = &AstDumperProcessor::process_startProgram;
    processMap_["endProgram"] = &AstDumperProcessor::process_endProgram;
    processMap_["startPackage"] = &AstDumperProcessor::process_startPackage;
    processMap_["endPackage"] = &AstDumperProcessor::process_endPackage;
    processMap_["executeImport"] = &AstDumperProcessor::process_executeImport;
    processMap_["startFunctionDefinition"] = &AstDumperProcessor::process_startFunctionDefinition;
    processMap_["functionAttribute"] = &AstDumperProcessor::process_functionAttribute;
    processMap_["functionName"] = &AstDumperProcessor::process_functionName;
    processMap_["startFunctionCommon"] = &AstDumperProcessor::process_startFunctionCommon;
    processMap_["startFunctionSignature"] = &AstDumperProcessor::process_startFunctionSignature;
    processMap_["startFunctionSignatureParameters"] = &AstDumperProcessor::process_startFunctionSignatureParameters;
    processMap_["startFunctionSignatureParameterMember"] = &AstDumperProcessor::process_startFunctionSignatureParameterMember;
    processMap_["endFunctionSignatureParameterMember"] = &AstDumperProcessor::process_endFunctionSignatureParameterMember;
    processMap_["endFunctionSignatureParameters"] = &AstDumperProcessor::process_endFunctionSignatureParameters;
    processMap_["endFunctionSignature"] = &AstDumperProcessor::process_endFunctionSignature;
    processMap_["endFunctionCommon"] = &AstDumperProcessor::process_endFunctionCommon;
    processMap_["endFunctionDefinition"] = &AstDumperProcessor::process_endFunctionDefinition;
    processMap_["startReturnStatement"] = &AstDumperProcessor::process_startReturnStatement;
    processMap_["endReturnStatement"] = &AstDumperProcessor::process_endReturnStatement;
    processMap_["startExprCondition"] = &AstDumperProcessor::process_startExprCondition;
    processMap_["endExprCondition"] = &AstDumperProcessor::process_endExprCondition;
    processMap_["startIfStatement"] = &AstDumperProcessor::process_startIfStatement;
    processMap_["endIfStatement"] = &AstDumperProcessor::process_endIfStatement;
    processMap_["startStmtExpression"] = &AstDumperProcessor::process_startStmtExpression;
    processMap_["endStmtExpression"] = &AstDumperProcessor::process_endStmtExpression;
    processMap_["startExpressionList"] = &AstDumperProcessor::process_startExpressionList;
    processMap_["startCallExpression"] = &AstDumperProcessor::process_startCallExpression;
    processMap_["startArgumentList"] = &AstDumperProcessor::process_startArgumentList;
    processMap_["startOneArgument"] = &AstDumperProcessor::process_startOneArgument;
    processMap_["endOneArgument"] = &AstDumperProcessor::process_endOneArgument;
    processMap_["endArgumentList"] = &AstDumperProcessor::process_endArgumentList;
    processMap_["endCallExpression"] = &AstDumperProcessor::process_endCallExpression;
    processMap_["startBinaryExpression"] = &AstDumperProcessor::process_startBinaryExpression;
    processMap_["endBinaryExpression"] = &AstDumperProcessor::process_endBinaryExpression;
    processMap_["startIncrementExpression"] = &AstDumperProcessor::process_startIncrementExpression;
    processMap_["endIncrementExpression"] = &AstDumperProcessor::process_endIncrementExpression;
    processMap_["startInstanceOfExpression"] = &AstDumperProcessor::process_startInstanceOfExpression;
    processMap_["endInstanceOfExpression"] = &AstDumperProcessor::process_endInstanceOfExpression;
    processMap_["startIsOperator"] = &AstDumperProcessor::process_startIsOperator;
    processMap_["endIsOperator"] = &AstDumperProcessor::process_endIsOperator;
    processMap_["startAsOperator"] = &AstDumperProcessor::process_startAsOperator;
    processMap_["endAsOperator"] = &AstDumperProcessor::process_endAsOperator;
    processMap_["startUnaryExpression"] = &AstDumperProcessor::process_startUnaryExpression;
    processMap_["endUnaryExpression"] = &AstDumperProcessor::process_endUnaryExpression;
    processMap_["startVariableDeclare"] = &AstDumperProcessor::process_startVariableDeclare;
    processMap_["endVariableDeclare"] = &AstDumperProcessor::process_endVariableDeclare;
    processMap_["startAssignment"] = &AstDumperProcessor::process_startAssignment;
    processMap_["endAssignment"] = &AstDumperProcessor::process_endAssignment;
    processMap_["identifierExpression"] = &AstDumperProcessor::process_identifierExpression;
    processMap_["literalStringExpression"] = &AstDumperProcessor::process_literalStringExpression;
    processMap_["literalNumberExpression"] = &AstDumperProcessor::process_literalNumberExpression;
    processMap_["literalBooleanExpression"] = &AstDumperProcessor::process_literalBooleanExpression;
    processMap_["literalNull"] = &AstDumperProcessor::process_literalNull;
    processMap_["thisExpression"] = &AstDumperProcessor::process_thisExpression;
    processMap_["endExpressionList"] = &AstDumperProcessor::process_endExpressionList;
    processMap_["addImport"] = &AstDumperProcessor::process_addImport;
    processMap_["startStmtList"] = &AstDumperProcessor::process_startStmtList;
    processMap_["endStmtList"] = &AstDumperProcessor::process_endStmtList;
    processMap_["startScope"] = &AstDumperProcessor::process_startScope;
    processMap_["endScope"] = &AstDumperProcessor::process_endScope;
    processMap_["startClassDefinition"] = &AstDumperProcessor::process_startClassDefinition;
    processMap_["startClassStmt"] = &AstDumperProcessor::process_startClassStmt;
    processMap_["endClassStmt"] = &AstDumperProcessor::process_endClassStmt;
    processMap_["endClassDefinition"] = &AstDumperProcessor::process_endClassDefinition;
    processMap_["startMemberExpression"] = &AstDumperProcessor::process_startMemberExpression;
    processMap_["endMemberExpression"] = &AstDumperProcessor::process_endMemberExpression;
    processMap_["startForStatement"] = &AstDumperProcessor::process_startForStatement;
    processMap_["startForInit"] = &AstDumperProcessor::process_startForInit;
    processMap_["endForInit"] = &AstDumperProcessor::process_endForInit;
    processMap_["startForStep"] = &AstDumperProcessor::process_startForStep;
    processMap_["endForStep"] = &AstDumperProcessor::process_endForStep;
    processMap_["endForStatement"] = &AstDumperProcessor::process_endForStatement;
    processMap_["startDoStatement"] = &AstDumperProcessor::process_startDoStatement;
    processMap_["endDoStatement"] = &AstDumperProcessor::process_endDoStatement;
    processMap_["startWhileStatement"] = &AstDumperProcessor::process_startWhileStatement;
    processMap_["endWhileStatement"] = &AstDumperProcessor::process_endWhileStatement;
    processMap_["defineMetaData"] = &AstDumperProcessor::process_defineMetaData;
  }

  virtual bool process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~AstDumperProcessor() {}
};

class AstDumperMultiface : virtual public AstDumperIf {
 public:
  AstDumperMultiface(std::vector<boost::shared_ptr<AstDumperIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~AstDumperMultiface() {}
 protected:
  std::vector<boost::shared_ptr<AstDumperIf> > ifaces_;
  AstDumperMultiface() {}
  void add(boost::shared_ptr<AstDumperIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void startProgram(const std::string& version, const int64_t counter) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startProgram(version, counter);
    }
  }

  void endProgram() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endProgram();
    }
  }

  void startPackage(const std::vector<std::string> & id) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startPackage(id);
    }
  }

  void endPackage(const std::vector<std::string> & IDs) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endPackage(IDs);
    }
  }

  void executeImport(const std::vector<std::string> & id) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->executeImport(id);
    }
  }

  void startFunctionDefinition(const bool isAbstract) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startFunctionDefinition(isAbstract);
    }
  }

  void functionAttribute(const std::vector<std::string> & attrs) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->functionAttribute(attrs);
    }
  }

  void functionName(const std::string& name, const FunctionType::type func_type) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->functionName(name, func_type);
    }
  }

  void startFunctionCommon() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startFunctionCommon();
    }
  }

  void startFunctionSignature(const std::string& type) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startFunctionSignature(type);
    }
  }

  void startFunctionSignatureParameters() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startFunctionSignatureParameters();
    }
  }

  void startFunctionSignatureParameterMember(const std::string& name, const std::vector<std::string> & type, const bool has_init, const std::string& init) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startFunctionSignatureParameterMember(name, type, has_init, init);
    }
  }

  void endFunctionSignatureParameterMember() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endFunctionSignatureParameterMember();
    }
  }

  void endFunctionSignatureParameters() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endFunctionSignatureParameters();
    }
  }

  void endFunctionSignature() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endFunctionSignature();
    }
  }

  void endFunctionCommon() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endFunctionCommon();
    }
  }

  void endFunctionDefinition() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endFunctionDefinition();
    }
  }

  void startReturnStatement() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startReturnStatement();
    }
  }

  void endReturnStatement() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endReturnStatement();
    }
  }

  void startExprCondition() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startExprCondition();
    }
  }

  void endExprCondition() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endExprCondition();
    }
  }

  void startIfStatement() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startIfStatement();
    }
  }

  void endIfStatement() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endIfStatement();
    }
  }

  void startStmtExpression() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startStmtExpression();
    }
  }

  void endStmtExpression() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endStmtExpression();
    }
  }

  void startExpressionList() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startExpressionList();
    }
  }

  void startCallExpression(const CallExpression& call) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startCallExpression(call);
    }
  }

  void startArgumentList() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startArgumentList();
    }
  }

  void startOneArgument() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startOneArgument();
    }
  }

  void endOneArgument() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endOneArgument();
    }
  }

  void endArgumentList() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endArgumentList();
    }
  }

  void endCallExpression() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endCallExpression();
    }
  }

  void startBinaryExpression(const BinaryExpression& op) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startBinaryExpression(op);
    }
  }

  void endBinaryExpression() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endBinaryExpression();
    }
  }

  void startIncrementExpression(const IncrementType::type type, const std::string& token) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startIncrementExpression(type, token);
    }
  }

  void endIncrementExpression() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endIncrementExpression();
    }
  }

  void startInstanceOfExpression() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startInstanceOfExpression();
    }
  }

  void endInstanceOfExpression() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endInstanceOfExpression();
    }
  }

  void startIsOperator() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startIsOperator();
    }
  }

  void endIsOperator() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endIsOperator();
    }
  }

  void startAsOperator() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startAsOperator();
    }
  }

  void endAsOperator() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endAsOperator();
    }
  }

  void startUnaryExpression(const UnaryExpression& op) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startUnaryExpression(op);
    }
  }

  void endUnaryExpression() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endUnaryExpression();
    }
  }

  void startVariableDeclare(const VariableDeclare& var_decl) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startVariableDeclare(var_decl);
    }
  }

  void endVariableDeclare() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endVariableDeclare();
    }
  }

  void startAssignment() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startAssignment();
    }
  }

  void endAssignment() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endAssignment();
    }
  }

  void identifierExpression(const Identifier& id) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->identifierExpression(id);
    }
  }

  void literalStringExpression(const Literal& str) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->literalStringExpression(str);
    }
  }

  void literalNumberExpression(const Literal& str) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->literalNumberExpression(str);
    }
  }

  void literalBooleanExpression(const Literal& str) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->literalBooleanExpression(str);
    }
  }

  void literalNull() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->literalNull();
    }
  }

  void thisExpression() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->thisExpression();
    }
  }

  void endExpressionList() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endExpressionList();
    }
  }

  void addImport(const std::vector<std::string> & packages) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->addImport(packages);
    }
  }

  void startStmtList() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startStmtList();
    }
  }

  void endStmtList() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endStmtList();
    }
  }

  void startScope() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startScope();
    }
  }

  void endScope() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endScope();
    }
  }

  void startClassDefinition(const ClassDefinition& class_define) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startClassDefinition(class_define);
    }
  }

  void startClassStmt() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startClassStmt();
    }
  }

  void endClassStmt() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endClassStmt();
    }
  }

  void endClassDefinition() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endClassDefinition();
    }
  }

  void startMemberExpression() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startMemberExpression();
    }
  }

  void endMemberExpression() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endMemberExpression();
    }
  }

  void startForStatement() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startForStatement();
    }
  }

  void startForInit() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startForInit();
    }
  }

  void endForInit() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endForInit();
    }
  }

  void startForStep() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startForStep();
    }
  }

  void endForStep() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endForStep();
    }
  }

  void endForStatement() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endForStatement();
    }
  }

  void startDoStatement() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startDoStatement();
    }
  }

  void endDoStatement() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endDoStatement();
    }
  }

  void startWhileStatement() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startWhileStatement();
    }
  }

  void endWhileStatement() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endWhileStatement();
    }
  }

  void defineMetaData(const MetaData& metadata) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->defineMetaData(metadata);
    }
  }

};

}}} // namespace

#endif
