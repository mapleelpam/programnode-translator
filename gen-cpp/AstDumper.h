/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef AstDumper_H
#define AstDumper_H

#include <TProcessor.h>
#include "SyntaxTree_types.h"

namespace tw { namespace maple { namespace generated {

class AstDumperIf {
 public:
  virtual ~AstDumperIf() {}
  virtual void startProgram() = 0;
  virtual void endProgram() = 0;
  virtual void startPackage(const StringList& id) = 0;
  virtual void endPackage(const StringList& IDs) = 0;
  virtual void startFunctionDefinition(const bool isAbstract) = 0;
  virtual void functionAttribute(const StringList& attrs) = 0;
  virtual void functionName(const std::string& name) = 0;
  virtual void startFunctionCommon() = 0;
  virtual void startFunctionSignature() = 0;
  virtual void startFunctionSignatureParameters() = 0;
  virtual void startFunctionSignatureParameterMember(const std::string& name, const std::string& type) = 0;
  virtual void endFunctionSignatureParameterMember() = 0;
  virtual void endFunctionSignatureParameters() = 0;
  virtual void functionSignatureReturnType(const std::string& name) = 0;
  virtual void endFunctionSignature() = 0;
  virtual void endFunctionCommon() = 0;
  virtual void endFunctionDefinition() = 0;
  virtual void startReturnStatement() = 0;
  virtual void endReturnStatement() = 0;
  virtual void startIfStatement() = 0;
  virtual void startIfStatement_Condition() = 0;
  virtual void endIfStatement_Condition() = 0;
  virtual void startIfStatement_Then() = 0;
  virtual void endIfStatement_Then() = 0;
  virtual void startIfStatement_Else() = 0;
  virtual void endtIfStatement_Else() = 0;
  virtual void endIfStatement() = 0;
  virtual void startStmtExpression() = 0;
  virtual void endStmtExpression() = 0;
  virtual void startExpressionList() = 0;
  virtual void startCallExpression(const CallExpression& call) = 0;
  virtual void startAgumentList() = 0;
  virtual void endAgumentList() = 0;
  virtual void endCallExpression() = 0;
  virtual void startBinaryExpression(const BinaryExpression& op) = 0;
  virtual void endBinaryExpression() = 0;
  virtual void startInstanceOfExpression() = 0;
  virtual void endInstanceOfExpression() = 0;
  virtual void startIsOperator() = 0;
  virtual void endIsOperator() = 0;
  virtual void startUnaryExpression(const UnaryExpression& op) = 0;
  virtual void endUnaryExpression() = 0;
  virtual void startVariableDeclare(const std::string& name, const std::string& type, const std::string& attributes) = 0;
  virtual void endVariableDeclare() = 0;
  virtual void startAssignment() = 0;
  virtual void endAssignment() = 0;
  virtual void identifierExpression(const Identifier& id) = 0;
  virtual void literalStringExpression(const Literal& str) = 0;
  virtual void literalNumberExpression(const Literal& str) = 0;
  virtual void literalBooleanExpression(const Literal& str) = 0;
  virtual void endExpressionList() = 0;
  virtual void addImport(const StringList& packages) = 0;
  virtual void startStmtList() = 0;
  virtual void endStmtList() = 0;
  virtual void startClassDefine(const ClassDefine& class_define) = 0;
  virtual void startClassStmt() = 0;
  virtual void endClassStmt() = 0;
  virtual void endClassDefine() = 0;
  virtual void startAttributeList() = 0;
  virtual void endAttributelist() = 0;
};

class AstDumperNull : virtual public AstDumperIf {
 public:
  virtual ~AstDumperNull() {}
  void startProgram() {
    return;
  }
  void endProgram() {
    return;
  }
  void startPackage(const StringList& /* id */) {
    return;
  }
  void endPackage(const StringList& /* IDs */) {
    return;
  }
  void startFunctionDefinition(const bool /* isAbstract */) {
    return;
  }
  void functionAttribute(const StringList& /* attrs */) {
    return;
  }
  void functionName(const std::string& /* name */) {
    return;
  }
  void startFunctionCommon() {
    return;
  }
  void startFunctionSignature() {
    return;
  }
  void startFunctionSignatureParameters() {
    return;
  }
  void startFunctionSignatureParameterMember(const std::string& /* name */, const std::string& /* type */) {
    return;
  }
  void endFunctionSignatureParameterMember() {
    return;
  }
  void endFunctionSignatureParameters() {
    return;
  }
  void functionSignatureReturnType(const std::string& /* name */) {
    return;
  }
  void endFunctionSignature() {
    return;
  }
  void endFunctionCommon() {
    return;
  }
  void endFunctionDefinition() {
    return;
  }
  void startReturnStatement() {
    return;
  }
  void endReturnStatement() {
    return;
  }
  void startIfStatement() {
    return;
  }
  void startIfStatement_Condition() {
    return;
  }
  void endIfStatement_Condition() {
    return;
  }
  void startIfStatement_Then() {
    return;
  }
  void endIfStatement_Then() {
    return;
  }
  void startIfStatement_Else() {
    return;
  }
  void endtIfStatement_Else() {
    return;
  }
  void endIfStatement() {
    return;
  }
  void startStmtExpression() {
    return;
  }
  void endStmtExpression() {
    return;
  }
  void startExpressionList() {
    return;
  }
  void startCallExpression(const CallExpression& /* call */) {
    return;
  }
  void startAgumentList() {
    return;
  }
  void endAgumentList() {
    return;
  }
  void endCallExpression() {
    return;
  }
  void startBinaryExpression(const BinaryExpression& /* op */) {
    return;
  }
  void endBinaryExpression() {
    return;
  }
  void startInstanceOfExpression() {
    return;
  }
  void endInstanceOfExpression() {
    return;
  }
  void startIsOperator() {
    return;
  }
  void endIsOperator() {
    return;
  }
  void startUnaryExpression(const UnaryExpression& /* op */) {
    return;
  }
  void endUnaryExpression() {
    return;
  }
  void startVariableDeclare(const std::string& /* name */, const std::string& /* type */, const std::string& /* attributes */) {
    return;
  }
  void endVariableDeclare() {
    return;
  }
  void startAssignment() {
    return;
  }
  void endAssignment() {
    return;
  }
  void identifierExpression(const Identifier& /* id */) {
    return;
  }
  void literalStringExpression(const Literal& /* str */) {
    return;
  }
  void literalNumberExpression(const Literal& /* str */) {
    return;
  }
  void literalBooleanExpression(const Literal& /* str */) {
    return;
  }
  void endExpressionList() {
    return;
  }
  void addImport(const StringList& /* packages */) {
    return;
  }
  void startStmtList() {
    return;
  }
  void endStmtList() {
    return;
  }
  void startClassDefine(const ClassDefine& /* class_define */) {
    return;
  }
  void startClassStmt() {
    return;
  }
  void endClassStmt() {
    return;
  }
  void endClassDefine() {
    return;
  }
  void startAttributeList() {
    return;
  }
  void endAttributelist() {
    return;
  }
};


class AstDumper_startProgram_args {
 public:

  AstDumper_startProgram_args() {
  }

  virtual ~AstDumper_startProgram_args() throw() {}


  bool operator == (const AstDumper_startProgram_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_startProgram_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startProgram_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startProgram_pargs {
 public:


  virtual ~AstDumper_startProgram_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endProgram_args {
 public:

  AstDumper_endProgram_args() {
  }

  virtual ~AstDumper_endProgram_args() throw() {}


  bool operator == (const AstDumper_endProgram_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_endProgram_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endProgram_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endProgram_pargs {
 public:


  virtual ~AstDumper_endProgram_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AstDumper_startPackage_args__isset {
  _AstDumper_startPackage_args__isset() : id(false) {}
  bool id;
} _AstDumper_startPackage_args__isset;

class AstDumper_startPackage_args {
 public:

  AstDumper_startPackage_args() {
  }

  virtual ~AstDumper_startPackage_args() throw() {}

  StringList id;

  _AstDumper_startPackage_args__isset __isset;

  bool operator == (const AstDumper_startPackage_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const AstDumper_startPackage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startPackage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startPackage_pargs {
 public:


  virtual ~AstDumper_startPackage_pargs() throw() {}

  const StringList* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AstDumper_endPackage_args__isset {
  _AstDumper_endPackage_args__isset() : IDs(false) {}
  bool IDs;
} _AstDumper_endPackage_args__isset;

class AstDumper_endPackage_args {
 public:

  AstDumper_endPackage_args() {
  }

  virtual ~AstDumper_endPackage_args() throw() {}

  StringList IDs;

  _AstDumper_endPackage_args__isset __isset;

  bool operator == (const AstDumper_endPackage_args & rhs) const
  {
    if (!(IDs == rhs.IDs))
      return false;
    return true;
  }
  bool operator != (const AstDumper_endPackage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endPackage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endPackage_pargs {
 public:


  virtual ~AstDumper_endPackage_pargs() throw() {}

  const StringList* IDs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AstDumper_startFunctionDefinition_args__isset {
  _AstDumper_startFunctionDefinition_args__isset() : isAbstract(false) {}
  bool isAbstract;
} _AstDumper_startFunctionDefinition_args__isset;

class AstDumper_startFunctionDefinition_args {
 public:

  AstDumper_startFunctionDefinition_args() : isAbstract(0) {
  }

  virtual ~AstDumper_startFunctionDefinition_args() throw() {}

  bool isAbstract;

  _AstDumper_startFunctionDefinition_args__isset __isset;

  bool operator == (const AstDumper_startFunctionDefinition_args & rhs) const
  {
    if (!(isAbstract == rhs.isAbstract))
      return false;
    return true;
  }
  bool operator != (const AstDumper_startFunctionDefinition_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startFunctionDefinition_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startFunctionDefinition_pargs {
 public:


  virtual ~AstDumper_startFunctionDefinition_pargs() throw() {}

  const bool* isAbstract;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AstDumper_functionAttribute_args__isset {
  _AstDumper_functionAttribute_args__isset() : attrs(false) {}
  bool attrs;
} _AstDumper_functionAttribute_args__isset;

class AstDumper_functionAttribute_args {
 public:

  AstDumper_functionAttribute_args() {
  }

  virtual ~AstDumper_functionAttribute_args() throw() {}

  StringList attrs;

  _AstDumper_functionAttribute_args__isset __isset;

  bool operator == (const AstDumper_functionAttribute_args & rhs) const
  {
    if (!(attrs == rhs.attrs))
      return false;
    return true;
  }
  bool operator != (const AstDumper_functionAttribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_functionAttribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_functionAttribute_pargs {
 public:


  virtual ~AstDumper_functionAttribute_pargs() throw() {}

  const StringList* attrs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AstDumper_functionName_args__isset {
  _AstDumper_functionName_args__isset() : name(false) {}
  bool name;
} _AstDumper_functionName_args__isset;

class AstDumper_functionName_args {
 public:

  AstDumper_functionName_args() : name("") {
  }

  virtual ~AstDumper_functionName_args() throw() {}

  std::string name;

  _AstDumper_functionName_args__isset __isset;

  bool operator == (const AstDumper_functionName_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const AstDumper_functionName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_functionName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_functionName_pargs {
 public:


  virtual ~AstDumper_functionName_pargs() throw() {}

  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startFunctionCommon_args {
 public:

  AstDumper_startFunctionCommon_args() {
  }

  virtual ~AstDumper_startFunctionCommon_args() throw() {}


  bool operator == (const AstDumper_startFunctionCommon_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_startFunctionCommon_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startFunctionCommon_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startFunctionCommon_pargs {
 public:


  virtual ~AstDumper_startFunctionCommon_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startFunctionSignature_args {
 public:

  AstDumper_startFunctionSignature_args() {
  }

  virtual ~AstDumper_startFunctionSignature_args() throw() {}


  bool operator == (const AstDumper_startFunctionSignature_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_startFunctionSignature_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startFunctionSignature_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startFunctionSignature_pargs {
 public:


  virtual ~AstDumper_startFunctionSignature_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startFunctionSignatureParameters_args {
 public:

  AstDumper_startFunctionSignatureParameters_args() {
  }

  virtual ~AstDumper_startFunctionSignatureParameters_args() throw() {}


  bool operator == (const AstDumper_startFunctionSignatureParameters_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_startFunctionSignatureParameters_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startFunctionSignatureParameters_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startFunctionSignatureParameters_pargs {
 public:


  virtual ~AstDumper_startFunctionSignatureParameters_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AstDumper_startFunctionSignatureParameterMember_args__isset {
  _AstDumper_startFunctionSignatureParameterMember_args__isset() : name(false), type(false) {}
  bool name;
  bool type;
} _AstDumper_startFunctionSignatureParameterMember_args__isset;

class AstDumper_startFunctionSignatureParameterMember_args {
 public:

  AstDumper_startFunctionSignatureParameterMember_args() : name(""), type("") {
  }

  virtual ~AstDumper_startFunctionSignatureParameterMember_args() throw() {}

  std::string name;
  std::string type;

  _AstDumper_startFunctionSignatureParameterMember_args__isset __isset;

  bool operator == (const AstDumper_startFunctionSignatureParameterMember_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const AstDumper_startFunctionSignatureParameterMember_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startFunctionSignatureParameterMember_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startFunctionSignatureParameterMember_pargs {
 public:


  virtual ~AstDumper_startFunctionSignatureParameterMember_pargs() throw() {}

  const std::string* name;
  const std::string* type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endFunctionSignatureParameterMember_args {
 public:

  AstDumper_endFunctionSignatureParameterMember_args() {
  }

  virtual ~AstDumper_endFunctionSignatureParameterMember_args() throw() {}


  bool operator == (const AstDumper_endFunctionSignatureParameterMember_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_endFunctionSignatureParameterMember_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endFunctionSignatureParameterMember_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endFunctionSignatureParameterMember_pargs {
 public:


  virtual ~AstDumper_endFunctionSignatureParameterMember_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endFunctionSignatureParameters_args {
 public:

  AstDumper_endFunctionSignatureParameters_args() {
  }

  virtual ~AstDumper_endFunctionSignatureParameters_args() throw() {}


  bool operator == (const AstDumper_endFunctionSignatureParameters_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_endFunctionSignatureParameters_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endFunctionSignatureParameters_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endFunctionSignatureParameters_pargs {
 public:


  virtual ~AstDumper_endFunctionSignatureParameters_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AstDumper_functionSignatureReturnType_args__isset {
  _AstDumper_functionSignatureReturnType_args__isset() : name(false) {}
  bool name;
} _AstDumper_functionSignatureReturnType_args__isset;

class AstDumper_functionSignatureReturnType_args {
 public:

  AstDumper_functionSignatureReturnType_args() : name("") {
  }

  virtual ~AstDumper_functionSignatureReturnType_args() throw() {}

  std::string name;

  _AstDumper_functionSignatureReturnType_args__isset __isset;

  bool operator == (const AstDumper_functionSignatureReturnType_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const AstDumper_functionSignatureReturnType_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_functionSignatureReturnType_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_functionSignatureReturnType_pargs {
 public:


  virtual ~AstDumper_functionSignatureReturnType_pargs() throw() {}

  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endFunctionSignature_args {
 public:

  AstDumper_endFunctionSignature_args() {
  }

  virtual ~AstDumper_endFunctionSignature_args() throw() {}


  bool operator == (const AstDumper_endFunctionSignature_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_endFunctionSignature_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endFunctionSignature_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endFunctionSignature_pargs {
 public:


  virtual ~AstDumper_endFunctionSignature_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endFunctionCommon_args {
 public:

  AstDumper_endFunctionCommon_args() {
  }

  virtual ~AstDumper_endFunctionCommon_args() throw() {}


  bool operator == (const AstDumper_endFunctionCommon_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_endFunctionCommon_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endFunctionCommon_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endFunctionCommon_pargs {
 public:


  virtual ~AstDumper_endFunctionCommon_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endFunctionDefinition_args {
 public:

  AstDumper_endFunctionDefinition_args() {
  }

  virtual ~AstDumper_endFunctionDefinition_args() throw() {}


  bool operator == (const AstDumper_endFunctionDefinition_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_endFunctionDefinition_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endFunctionDefinition_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endFunctionDefinition_pargs {
 public:


  virtual ~AstDumper_endFunctionDefinition_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startReturnStatement_args {
 public:

  AstDumper_startReturnStatement_args() {
  }

  virtual ~AstDumper_startReturnStatement_args() throw() {}


  bool operator == (const AstDumper_startReturnStatement_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_startReturnStatement_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startReturnStatement_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startReturnStatement_pargs {
 public:


  virtual ~AstDumper_startReturnStatement_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endReturnStatement_args {
 public:

  AstDumper_endReturnStatement_args() {
  }

  virtual ~AstDumper_endReturnStatement_args() throw() {}


  bool operator == (const AstDumper_endReturnStatement_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_endReturnStatement_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endReturnStatement_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endReturnStatement_pargs {
 public:


  virtual ~AstDumper_endReturnStatement_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startIfStatement_args {
 public:

  AstDumper_startIfStatement_args() {
  }

  virtual ~AstDumper_startIfStatement_args() throw() {}


  bool operator == (const AstDumper_startIfStatement_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_startIfStatement_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startIfStatement_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startIfStatement_pargs {
 public:


  virtual ~AstDumper_startIfStatement_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startIfStatement_Condition_args {
 public:

  AstDumper_startIfStatement_Condition_args() {
  }

  virtual ~AstDumper_startIfStatement_Condition_args() throw() {}


  bool operator == (const AstDumper_startIfStatement_Condition_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_startIfStatement_Condition_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startIfStatement_Condition_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startIfStatement_Condition_pargs {
 public:


  virtual ~AstDumper_startIfStatement_Condition_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endIfStatement_Condition_args {
 public:

  AstDumper_endIfStatement_Condition_args() {
  }

  virtual ~AstDumper_endIfStatement_Condition_args() throw() {}


  bool operator == (const AstDumper_endIfStatement_Condition_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_endIfStatement_Condition_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endIfStatement_Condition_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endIfStatement_Condition_pargs {
 public:


  virtual ~AstDumper_endIfStatement_Condition_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startIfStatement_Then_args {
 public:

  AstDumper_startIfStatement_Then_args() {
  }

  virtual ~AstDumper_startIfStatement_Then_args() throw() {}


  bool operator == (const AstDumper_startIfStatement_Then_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_startIfStatement_Then_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startIfStatement_Then_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startIfStatement_Then_pargs {
 public:


  virtual ~AstDumper_startIfStatement_Then_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endIfStatement_Then_args {
 public:

  AstDumper_endIfStatement_Then_args() {
  }

  virtual ~AstDumper_endIfStatement_Then_args() throw() {}


  bool operator == (const AstDumper_endIfStatement_Then_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_endIfStatement_Then_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endIfStatement_Then_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endIfStatement_Then_pargs {
 public:


  virtual ~AstDumper_endIfStatement_Then_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startIfStatement_Else_args {
 public:

  AstDumper_startIfStatement_Else_args() {
  }

  virtual ~AstDumper_startIfStatement_Else_args() throw() {}


  bool operator == (const AstDumper_startIfStatement_Else_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_startIfStatement_Else_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startIfStatement_Else_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startIfStatement_Else_pargs {
 public:


  virtual ~AstDumper_startIfStatement_Else_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endtIfStatement_Else_args {
 public:

  AstDumper_endtIfStatement_Else_args() {
  }

  virtual ~AstDumper_endtIfStatement_Else_args() throw() {}


  bool operator == (const AstDumper_endtIfStatement_Else_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_endtIfStatement_Else_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endtIfStatement_Else_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endtIfStatement_Else_pargs {
 public:


  virtual ~AstDumper_endtIfStatement_Else_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endIfStatement_args {
 public:

  AstDumper_endIfStatement_args() {
  }

  virtual ~AstDumper_endIfStatement_args() throw() {}


  bool operator == (const AstDumper_endIfStatement_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_endIfStatement_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endIfStatement_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endIfStatement_pargs {
 public:


  virtual ~AstDumper_endIfStatement_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startStmtExpression_args {
 public:

  AstDumper_startStmtExpression_args() {
  }

  virtual ~AstDumper_startStmtExpression_args() throw() {}


  bool operator == (const AstDumper_startStmtExpression_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_startStmtExpression_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startStmtExpression_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startStmtExpression_pargs {
 public:


  virtual ~AstDumper_startStmtExpression_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endStmtExpression_args {
 public:

  AstDumper_endStmtExpression_args() {
  }

  virtual ~AstDumper_endStmtExpression_args() throw() {}


  bool operator == (const AstDumper_endStmtExpression_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_endStmtExpression_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endStmtExpression_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endStmtExpression_pargs {
 public:


  virtual ~AstDumper_endStmtExpression_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startExpressionList_args {
 public:

  AstDumper_startExpressionList_args() {
  }

  virtual ~AstDumper_startExpressionList_args() throw() {}


  bool operator == (const AstDumper_startExpressionList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_startExpressionList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startExpressionList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startExpressionList_pargs {
 public:


  virtual ~AstDumper_startExpressionList_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AstDumper_startCallExpression_args__isset {
  _AstDumper_startCallExpression_args__isset() : call(false) {}
  bool call;
} _AstDumper_startCallExpression_args__isset;

class AstDumper_startCallExpression_args {
 public:

  AstDumper_startCallExpression_args() {
  }

  virtual ~AstDumper_startCallExpression_args() throw() {}

  CallExpression call;

  _AstDumper_startCallExpression_args__isset __isset;

  bool operator == (const AstDumper_startCallExpression_args & rhs) const
  {
    if (!(call == rhs.call))
      return false;
    return true;
  }
  bool operator != (const AstDumper_startCallExpression_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startCallExpression_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startCallExpression_pargs {
 public:


  virtual ~AstDumper_startCallExpression_pargs() throw() {}

  const CallExpression* call;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startAgumentList_args {
 public:

  AstDumper_startAgumentList_args() {
  }

  virtual ~AstDumper_startAgumentList_args() throw() {}


  bool operator == (const AstDumper_startAgumentList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_startAgumentList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startAgumentList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startAgumentList_pargs {
 public:


  virtual ~AstDumper_startAgumentList_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endAgumentList_args {
 public:

  AstDumper_endAgumentList_args() {
  }

  virtual ~AstDumper_endAgumentList_args() throw() {}


  bool operator == (const AstDumper_endAgumentList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_endAgumentList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endAgumentList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endAgumentList_pargs {
 public:


  virtual ~AstDumper_endAgumentList_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endCallExpression_args {
 public:

  AstDumper_endCallExpression_args() {
  }

  virtual ~AstDumper_endCallExpression_args() throw() {}


  bool operator == (const AstDumper_endCallExpression_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_endCallExpression_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endCallExpression_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endCallExpression_pargs {
 public:


  virtual ~AstDumper_endCallExpression_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AstDumper_startBinaryExpression_args__isset {
  _AstDumper_startBinaryExpression_args__isset() : op(false) {}
  bool op;
} _AstDumper_startBinaryExpression_args__isset;

class AstDumper_startBinaryExpression_args {
 public:

  AstDumper_startBinaryExpression_args() {
  }

  virtual ~AstDumper_startBinaryExpression_args() throw() {}

  BinaryExpression op;

  _AstDumper_startBinaryExpression_args__isset __isset;

  bool operator == (const AstDumper_startBinaryExpression_args & rhs) const
  {
    if (!(op == rhs.op))
      return false;
    return true;
  }
  bool operator != (const AstDumper_startBinaryExpression_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startBinaryExpression_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startBinaryExpression_pargs {
 public:


  virtual ~AstDumper_startBinaryExpression_pargs() throw() {}

  const BinaryExpression* op;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endBinaryExpression_args {
 public:

  AstDumper_endBinaryExpression_args() {
  }

  virtual ~AstDumper_endBinaryExpression_args() throw() {}


  bool operator == (const AstDumper_endBinaryExpression_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_endBinaryExpression_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endBinaryExpression_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endBinaryExpression_pargs {
 public:


  virtual ~AstDumper_endBinaryExpression_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startInstanceOfExpression_args {
 public:

  AstDumper_startInstanceOfExpression_args() {
  }

  virtual ~AstDumper_startInstanceOfExpression_args() throw() {}


  bool operator == (const AstDumper_startInstanceOfExpression_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_startInstanceOfExpression_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startInstanceOfExpression_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startInstanceOfExpression_pargs {
 public:


  virtual ~AstDumper_startInstanceOfExpression_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endInstanceOfExpression_args {
 public:

  AstDumper_endInstanceOfExpression_args() {
  }

  virtual ~AstDumper_endInstanceOfExpression_args() throw() {}


  bool operator == (const AstDumper_endInstanceOfExpression_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_endInstanceOfExpression_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endInstanceOfExpression_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endInstanceOfExpression_pargs {
 public:


  virtual ~AstDumper_endInstanceOfExpression_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startIsOperator_args {
 public:

  AstDumper_startIsOperator_args() {
  }

  virtual ~AstDumper_startIsOperator_args() throw() {}


  bool operator == (const AstDumper_startIsOperator_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_startIsOperator_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startIsOperator_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startIsOperator_pargs {
 public:


  virtual ~AstDumper_startIsOperator_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endIsOperator_args {
 public:

  AstDumper_endIsOperator_args() {
  }

  virtual ~AstDumper_endIsOperator_args() throw() {}


  bool operator == (const AstDumper_endIsOperator_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_endIsOperator_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endIsOperator_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endIsOperator_pargs {
 public:


  virtual ~AstDumper_endIsOperator_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AstDumper_startUnaryExpression_args__isset {
  _AstDumper_startUnaryExpression_args__isset() : op(false) {}
  bool op;
} _AstDumper_startUnaryExpression_args__isset;

class AstDumper_startUnaryExpression_args {
 public:

  AstDumper_startUnaryExpression_args() {
  }

  virtual ~AstDumper_startUnaryExpression_args() throw() {}

  UnaryExpression op;

  _AstDumper_startUnaryExpression_args__isset __isset;

  bool operator == (const AstDumper_startUnaryExpression_args & rhs) const
  {
    if (!(op == rhs.op))
      return false;
    return true;
  }
  bool operator != (const AstDumper_startUnaryExpression_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startUnaryExpression_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startUnaryExpression_pargs {
 public:


  virtual ~AstDumper_startUnaryExpression_pargs() throw() {}

  const UnaryExpression* op;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endUnaryExpression_args {
 public:

  AstDumper_endUnaryExpression_args() {
  }

  virtual ~AstDumper_endUnaryExpression_args() throw() {}


  bool operator == (const AstDumper_endUnaryExpression_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_endUnaryExpression_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endUnaryExpression_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endUnaryExpression_pargs {
 public:


  virtual ~AstDumper_endUnaryExpression_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AstDumper_startVariableDeclare_args__isset {
  _AstDumper_startVariableDeclare_args__isset() : name(false), type(false), attributes(false) {}
  bool name;
  bool type;
  bool attributes;
} _AstDumper_startVariableDeclare_args__isset;

class AstDumper_startVariableDeclare_args {
 public:

  AstDumper_startVariableDeclare_args() : name(""), type(""), attributes("") {
  }

  virtual ~AstDumper_startVariableDeclare_args() throw() {}

  std::string name;
  std::string type;
  std::string attributes;

  _AstDumper_startVariableDeclare_args__isset __isset;

  bool operator == (const AstDumper_startVariableDeclare_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(attributes == rhs.attributes))
      return false;
    return true;
  }
  bool operator != (const AstDumper_startVariableDeclare_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startVariableDeclare_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startVariableDeclare_pargs {
 public:


  virtual ~AstDumper_startVariableDeclare_pargs() throw() {}

  const std::string* name;
  const std::string* type;
  const std::string* attributes;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endVariableDeclare_args {
 public:

  AstDumper_endVariableDeclare_args() {
  }

  virtual ~AstDumper_endVariableDeclare_args() throw() {}


  bool operator == (const AstDumper_endVariableDeclare_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_endVariableDeclare_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endVariableDeclare_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endVariableDeclare_pargs {
 public:


  virtual ~AstDumper_endVariableDeclare_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startAssignment_args {
 public:

  AstDumper_startAssignment_args() {
  }

  virtual ~AstDumper_startAssignment_args() throw() {}


  bool operator == (const AstDumper_startAssignment_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_startAssignment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startAssignment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startAssignment_pargs {
 public:


  virtual ~AstDumper_startAssignment_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endAssignment_args {
 public:

  AstDumper_endAssignment_args() {
  }

  virtual ~AstDumper_endAssignment_args() throw() {}


  bool operator == (const AstDumper_endAssignment_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_endAssignment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endAssignment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endAssignment_pargs {
 public:


  virtual ~AstDumper_endAssignment_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AstDumper_identifierExpression_args__isset {
  _AstDumper_identifierExpression_args__isset() : id(false) {}
  bool id;
} _AstDumper_identifierExpression_args__isset;

class AstDumper_identifierExpression_args {
 public:

  AstDumper_identifierExpression_args() {
  }

  virtual ~AstDumper_identifierExpression_args() throw() {}

  Identifier id;

  _AstDumper_identifierExpression_args__isset __isset;

  bool operator == (const AstDumper_identifierExpression_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const AstDumper_identifierExpression_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_identifierExpression_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_identifierExpression_pargs {
 public:


  virtual ~AstDumper_identifierExpression_pargs() throw() {}

  const Identifier* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AstDumper_literalStringExpression_args__isset {
  _AstDumper_literalStringExpression_args__isset() : str(false) {}
  bool str;
} _AstDumper_literalStringExpression_args__isset;

class AstDumper_literalStringExpression_args {
 public:

  AstDumper_literalStringExpression_args() {
  }

  virtual ~AstDumper_literalStringExpression_args() throw() {}

  Literal str;

  _AstDumper_literalStringExpression_args__isset __isset;

  bool operator == (const AstDumper_literalStringExpression_args & rhs) const
  {
    if (!(str == rhs.str))
      return false;
    return true;
  }
  bool operator != (const AstDumper_literalStringExpression_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_literalStringExpression_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_literalStringExpression_pargs {
 public:


  virtual ~AstDumper_literalStringExpression_pargs() throw() {}

  const Literal* str;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AstDumper_literalNumberExpression_args__isset {
  _AstDumper_literalNumberExpression_args__isset() : str(false) {}
  bool str;
} _AstDumper_literalNumberExpression_args__isset;

class AstDumper_literalNumberExpression_args {
 public:

  AstDumper_literalNumberExpression_args() {
  }

  virtual ~AstDumper_literalNumberExpression_args() throw() {}

  Literal str;

  _AstDumper_literalNumberExpression_args__isset __isset;

  bool operator == (const AstDumper_literalNumberExpression_args & rhs) const
  {
    if (!(str == rhs.str))
      return false;
    return true;
  }
  bool operator != (const AstDumper_literalNumberExpression_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_literalNumberExpression_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_literalNumberExpression_pargs {
 public:


  virtual ~AstDumper_literalNumberExpression_pargs() throw() {}

  const Literal* str;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AstDumper_literalBooleanExpression_args__isset {
  _AstDumper_literalBooleanExpression_args__isset() : str(false) {}
  bool str;
} _AstDumper_literalBooleanExpression_args__isset;

class AstDumper_literalBooleanExpression_args {
 public:

  AstDumper_literalBooleanExpression_args() {
  }

  virtual ~AstDumper_literalBooleanExpression_args() throw() {}

  Literal str;

  _AstDumper_literalBooleanExpression_args__isset __isset;

  bool operator == (const AstDumper_literalBooleanExpression_args & rhs) const
  {
    if (!(str == rhs.str))
      return false;
    return true;
  }
  bool operator != (const AstDumper_literalBooleanExpression_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_literalBooleanExpression_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_literalBooleanExpression_pargs {
 public:


  virtual ~AstDumper_literalBooleanExpression_pargs() throw() {}

  const Literal* str;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endExpressionList_args {
 public:

  AstDumper_endExpressionList_args() {
  }

  virtual ~AstDumper_endExpressionList_args() throw() {}


  bool operator == (const AstDumper_endExpressionList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_endExpressionList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endExpressionList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endExpressionList_pargs {
 public:


  virtual ~AstDumper_endExpressionList_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AstDumper_addImport_args__isset {
  _AstDumper_addImport_args__isset() : packages(false) {}
  bool packages;
} _AstDumper_addImport_args__isset;

class AstDumper_addImport_args {
 public:

  AstDumper_addImport_args() {
  }

  virtual ~AstDumper_addImport_args() throw() {}

  StringList packages;

  _AstDumper_addImport_args__isset __isset;

  bool operator == (const AstDumper_addImport_args & rhs) const
  {
    if (!(packages == rhs.packages))
      return false;
    return true;
  }
  bool operator != (const AstDumper_addImport_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_addImport_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_addImport_pargs {
 public:


  virtual ~AstDumper_addImport_pargs() throw() {}

  const StringList* packages;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startStmtList_args {
 public:

  AstDumper_startStmtList_args() {
  }

  virtual ~AstDumper_startStmtList_args() throw() {}


  bool operator == (const AstDumper_startStmtList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_startStmtList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startStmtList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startStmtList_pargs {
 public:


  virtual ~AstDumper_startStmtList_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endStmtList_args {
 public:

  AstDumper_endStmtList_args() {
  }

  virtual ~AstDumper_endStmtList_args() throw() {}


  bool operator == (const AstDumper_endStmtList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_endStmtList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endStmtList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endStmtList_pargs {
 public:


  virtual ~AstDumper_endStmtList_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AstDumper_startClassDefine_args__isset {
  _AstDumper_startClassDefine_args__isset() : class_define(false) {}
  bool class_define;
} _AstDumper_startClassDefine_args__isset;

class AstDumper_startClassDefine_args {
 public:

  AstDumper_startClassDefine_args() {
  }

  virtual ~AstDumper_startClassDefine_args() throw() {}

  ClassDefine class_define;

  _AstDumper_startClassDefine_args__isset __isset;

  bool operator == (const AstDumper_startClassDefine_args & rhs) const
  {
    if (!(class_define == rhs.class_define))
      return false;
    return true;
  }
  bool operator != (const AstDumper_startClassDefine_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startClassDefine_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startClassDefine_pargs {
 public:


  virtual ~AstDumper_startClassDefine_pargs() throw() {}

  const ClassDefine* class_define;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startClassStmt_args {
 public:

  AstDumper_startClassStmt_args() {
  }

  virtual ~AstDumper_startClassStmt_args() throw() {}


  bool operator == (const AstDumper_startClassStmt_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_startClassStmt_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startClassStmt_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startClassStmt_pargs {
 public:


  virtual ~AstDumper_startClassStmt_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endClassStmt_args {
 public:

  AstDumper_endClassStmt_args() {
  }

  virtual ~AstDumper_endClassStmt_args() throw() {}


  bool operator == (const AstDumper_endClassStmt_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_endClassStmt_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endClassStmt_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endClassStmt_pargs {
 public:


  virtual ~AstDumper_endClassStmt_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endClassDefine_args {
 public:

  AstDumper_endClassDefine_args() {
  }

  virtual ~AstDumper_endClassDefine_args() throw() {}


  bool operator == (const AstDumper_endClassDefine_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_endClassDefine_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endClassDefine_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endClassDefine_pargs {
 public:


  virtual ~AstDumper_endClassDefine_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startAttributeList_args {
 public:

  AstDumper_startAttributeList_args() {
  }

  virtual ~AstDumper_startAttributeList_args() throw() {}


  bool operator == (const AstDumper_startAttributeList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_startAttributeList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_startAttributeList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_startAttributeList_pargs {
 public:


  virtual ~AstDumper_startAttributeList_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endAttributelist_args {
 public:

  AstDumper_endAttributelist_args() {
  }

  virtual ~AstDumper_endAttributelist_args() throw() {}


  bool operator == (const AstDumper_endAttributelist_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstDumper_endAttributelist_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstDumper_endAttributelist_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstDumper_endAttributelist_pargs {
 public:


  virtual ~AstDumper_endAttributelist_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class AstDumperClient : virtual public AstDumperIf {
 public:
  AstDumperClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  AstDumperClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void startProgram();
  void send_startProgram();
  void endProgram();
  void send_endProgram();
  void startPackage(const StringList& id);
  void send_startPackage(const StringList& id);
  void endPackage(const StringList& IDs);
  void send_endPackage(const StringList& IDs);
  void startFunctionDefinition(const bool isAbstract);
  void send_startFunctionDefinition(const bool isAbstract);
  void functionAttribute(const StringList& attrs);
  void send_functionAttribute(const StringList& attrs);
  void functionName(const std::string& name);
  void send_functionName(const std::string& name);
  void startFunctionCommon();
  void send_startFunctionCommon();
  void startFunctionSignature();
  void send_startFunctionSignature();
  void startFunctionSignatureParameters();
  void send_startFunctionSignatureParameters();
  void startFunctionSignatureParameterMember(const std::string& name, const std::string& type);
  void send_startFunctionSignatureParameterMember(const std::string& name, const std::string& type);
  void endFunctionSignatureParameterMember();
  void send_endFunctionSignatureParameterMember();
  void endFunctionSignatureParameters();
  void send_endFunctionSignatureParameters();
  void functionSignatureReturnType(const std::string& name);
  void send_functionSignatureReturnType(const std::string& name);
  void endFunctionSignature();
  void send_endFunctionSignature();
  void endFunctionCommon();
  void send_endFunctionCommon();
  void endFunctionDefinition();
  void send_endFunctionDefinition();
  void startReturnStatement();
  void send_startReturnStatement();
  void endReturnStatement();
  void send_endReturnStatement();
  void startIfStatement();
  void send_startIfStatement();
  void startIfStatement_Condition();
  void send_startIfStatement_Condition();
  void endIfStatement_Condition();
  void send_endIfStatement_Condition();
  void startIfStatement_Then();
  void send_startIfStatement_Then();
  void endIfStatement_Then();
  void send_endIfStatement_Then();
  void startIfStatement_Else();
  void send_startIfStatement_Else();
  void endtIfStatement_Else();
  void send_endtIfStatement_Else();
  void endIfStatement();
  void send_endIfStatement();
  void startStmtExpression();
  void send_startStmtExpression();
  void endStmtExpression();
  void send_endStmtExpression();
  void startExpressionList();
  void send_startExpressionList();
  void startCallExpression(const CallExpression& call);
  void send_startCallExpression(const CallExpression& call);
  void startAgumentList();
  void send_startAgumentList();
  void endAgumentList();
  void send_endAgumentList();
  void endCallExpression();
  void send_endCallExpression();
  void startBinaryExpression(const BinaryExpression& op);
  void send_startBinaryExpression(const BinaryExpression& op);
  void endBinaryExpression();
  void send_endBinaryExpression();
  void startInstanceOfExpression();
  void send_startInstanceOfExpression();
  void endInstanceOfExpression();
  void send_endInstanceOfExpression();
  void startIsOperator();
  void send_startIsOperator();
  void endIsOperator();
  void send_endIsOperator();
  void startUnaryExpression(const UnaryExpression& op);
  void send_startUnaryExpression(const UnaryExpression& op);
  void endUnaryExpression();
  void send_endUnaryExpression();
  void startVariableDeclare(const std::string& name, const std::string& type, const std::string& attributes);
  void send_startVariableDeclare(const std::string& name, const std::string& type, const std::string& attributes);
  void endVariableDeclare();
  void send_endVariableDeclare();
  void startAssignment();
  void send_startAssignment();
  void endAssignment();
  void send_endAssignment();
  void identifierExpression(const Identifier& id);
  void send_identifierExpression(const Identifier& id);
  void literalStringExpression(const Literal& str);
  void send_literalStringExpression(const Literal& str);
  void literalNumberExpression(const Literal& str);
  void send_literalNumberExpression(const Literal& str);
  void literalBooleanExpression(const Literal& str);
  void send_literalBooleanExpression(const Literal& str);
  void endExpressionList();
  void send_endExpressionList();
  void addImport(const StringList& packages);
  void send_addImport(const StringList& packages);
  void startStmtList();
  void send_startStmtList();
  void endStmtList();
  void send_endStmtList();
  void startClassDefine(const ClassDefine& class_define);
  void send_startClassDefine(const ClassDefine& class_define);
  void startClassStmt();
  void send_startClassStmt();
  void endClassStmt();
  void send_endClassStmt();
  void endClassDefine();
  void send_endClassDefine();
  void startAttributeList();
  void send_startAttributeList();
  void endAttributelist();
  void send_endAttributelist();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class AstDumperProcessor : virtual public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<AstDumperIf> iface_;
  virtual bool process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (AstDumperProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_startProgram(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endProgram(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startPackage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endPackage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startFunctionDefinition(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_functionAttribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_functionName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startFunctionCommon(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startFunctionSignature(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startFunctionSignatureParameters(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startFunctionSignatureParameterMember(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endFunctionSignatureParameterMember(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endFunctionSignatureParameters(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_functionSignatureReturnType(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endFunctionSignature(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endFunctionCommon(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endFunctionDefinition(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startReturnStatement(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endReturnStatement(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startIfStatement(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startIfStatement_Condition(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endIfStatement_Condition(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startIfStatement_Then(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endIfStatement_Then(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startIfStatement_Else(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endtIfStatement_Else(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endIfStatement(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startStmtExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endStmtExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startExpressionList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startCallExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startAgumentList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endAgumentList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endCallExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startBinaryExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endBinaryExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startInstanceOfExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endInstanceOfExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startIsOperator(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endIsOperator(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startUnaryExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endUnaryExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startVariableDeclare(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endVariableDeclare(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startAssignment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endAssignment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_identifierExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_literalStringExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_literalNumberExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_literalBooleanExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endExpressionList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addImport(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startStmtList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endStmtList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startClassDefine(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startClassStmt(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endClassStmt(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endClassDefine(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startAttributeList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endAttributelist(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  AstDumperProcessor(boost::shared_ptr<AstDumperIf> iface) :
    iface_(iface) {
    processMap_["startProgram"] = &AstDumperProcessor::process_startProgram;
    processMap_["endProgram"] = &AstDumperProcessor::process_endProgram;
    processMap_["startPackage"] = &AstDumperProcessor::process_startPackage;
    processMap_["endPackage"] = &AstDumperProcessor::process_endPackage;
    processMap_["startFunctionDefinition"] = &AstDumperProcessor::process_startFunctionDefinition;
    processMap_["functionAttribute"] = &AstDumperProcessor::process_functionAttribute;
    processMap_["functionName"] = &AstDumperProcessor::process_functionName;
    processMap_["startFunctionCommon"] = &AstDumperProcessor::process_startFunctionCommon;
    processMap_["startFunctionSignature"] = &AstDumperProcessor::process_startFunctionSignature;
    processMap_["startFunctionSignatureParameters"] = &AstDumperProcessor::process_startFunctionSignatureParameters;
    processMap_["startFunctionSignatureParameterMember"] = &AstDumperProcessor::process_startFunctionSignatureParameterMember;
    processMap_["endFunctionSignatureParameterMember"] = &AstDumperProcessor::process_endFunctionSignatureParameterMember;
    processMap_["endFunctionSignatureParameters"] = &AstDumperProcessor::process_endFunctionSignatureParameters;
    processMap_["functionSignatureReturnType"] = &AstDumperProcessor::process_functionSignatureReturnType;
    processMap_["endFunctionSignature"] = &AstDumperProcessor::process_endFunctionSignature;
    processMap_["endFunctionCommon"] = &AstDumperProcessor::process_endFunctionCommon;
    processMap_["endFunctionDefinition"] = &AstDumperProcessor::process_endFunctionDefinition;
    processMap_["startReturnStatement"] = &AstDumperProcessor::process_startReturnStatement;
    processMap_["endReturnStatement"] = &AstDumperProcessor::process_endReturnStatement;
    processMap_["startIfStatement"] = &AstDumperProcessor::process_startIfStatement;
    processMap_["startIfStatement_Condition"] = &AstDumperProcessor::process_startIfStatement_Condition;
    processMap_["endIfStatement_Condition"] = &AstDumperProcessor::process_endIfStatement_Condition;
    processMap_["startIfStatement_Then"] = &AstDumperProcessor::process_startIfStatement_Then;
    processMap_["endIfStatement_Then"] = &AstDumperProcessor::process_endIfStatement_Then;
    processMap_["startIfStatement_Else"] = &AstDumperProcessor::process_startIfStatement_Else;
    processMap_["endtIfStatement_Else"] = &AstDumperProcessor::process_endtIfStatement_Else;
    processMap_["endIfStatement"] = &AstDumperProcessor::process_endIfStatement;
    processMap_["startStmtExpression"] = &AstDumperProcessor::process_startStmtExpression;
    processMap_["endStmtExpression"] = &AstDumperProcessor::process_endStmtExpression;
    processMap_["startExpressionList"] = &AstDumperProcessor::process_startExpressionList;
    processMap_["startCallExpression"] = &AstDumperProcessor::process_startCallExpression;
    processMap_["startAgumentList"] = &AstDumperProcessor::process_startAgumentList;
    processMap_["endAgumentList"] = &AstDumperProcessor::process_endAgumentList;
    processMap_["endCallExpression"] = &AstDumperProcessor::process_endCallExpression;
    processMap_["startBinaryExpression"] = &AstDumperProcessor::process_startBinaryExpression;
    processMap_["endBinaryExpression"] = &AstDumperProcessor::process_endBinaryExpression;
    processMap_["startInstanceOfExpression"] = &AstDumperProcessor::process_startInstanceOfExpression;
    processMap_["endInstanceOfExpression"] = &AstDumperProcessor::process_endInstanceOfExpression;
    processMap_["startIsOperator"] = &AstDumperProcessor::process_startIsOperator;
    processMap_["endIsOperator"] = &AstDumperProcessor::process_endIsOperator;
    processMap_["startUnaryExpression"] = &AstDumperProcessor::process_startUnaryExpression;
    processMap_["endUnaryExpression"] = &AstDumperProcessor::process_endUnaryExpression;
    processMap_["startVariableDeclare"] = &AstDumperProcessor::process_startVariableDeclare;
    processMap_["endVariableDeclare"] = &AstDumperProcessor::process_endVariableDeclare;
    processMap_["startAssignment"] = &AstDumperProcessor::process_startAssignment;
    processMap_["endAssignment"] = &AstDumperProcessor::process_endAssignment;
    processMap_["identifierExpression"] = &AstDumperProcessor::process_identifierExpression;
    processMap_["literalStringExpression"] = &AstDumperProcessor::process_literalStringExpression;
    processMap_["literalNumberExpression"] = &AstDumperProcessor::process_literalNumberExpression;
    processMap_["literalBooleanExpression"] = &AstDumperProcessor::process_literalBooleanExpression;
    processMap_["endExpressionList"] = &AstDumperProcessor::process_endExpressionList;
    processMap_["addImport"] = &AstDumperProcessor::process_addImport;
    processMap_["startStmtList"] = &AstDumperProcessor::process_startStmtList;
    processMap_["endStmtList"] = &AstDumperProcessor::process_endStmtList;
    processMap_["startClassDefine"] = &AstDumperProcessor::process_startClassDefine;
    processMap_["startClassStmt"] = &AstDumperProcessor::process_startClassStmt;
    processMap_["endClassStmt"] = &AstDumperProcessor::process_endClassStmt;
    processMap_["endClassDefine"] = &AstDumperProcessor::process_endClassDefine;
    processMap_["startAttributeList"] = &AstDumperProcessor::process_startAttributeList;
    processMap_["endAttributelist"] = &AstDumperProcessor::process_endAttributelist;
  }

  virtual bool process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~AstDumperProcessor() {}
};

class AstDumperMultiface : virtual public AstDumperIf {
 public:
  AstDumperMultiface(std::vector<boost::shared_ptr<AstDumperIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~AstDumperMultiface() {}
 protected:
  std::vector<boost::shared_ptr<AstDumperIf> > ifaces_;
  AstDumperMultiface() {}
  void add(boost::shared_ptr<AstDumperIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void startProgram() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startProgram();
    }
  }

  void endProgram() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endProgram();
    }
  }

  void startPackage(const StringList& id) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startPackage(id);
    }
  }

  void endPackage(const StringList& IDs) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endPackage(IDs);
    }
  }

  void startFunctionDefinition(const bool isAbstract) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startFunctionDefinition(isAbstract);
    }
  }

  void functionAttribute(const StringList& attrs) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->functionAttribute(attrs);
    }
  }

  void functionName(const std::string& name) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->functionName(name);
    }
  }

  void startFunctionCommon() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startFunctionCommon();
    }
  }

  void startFunctionSignature() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startFunctionSignature();
    }
  }

  void startFunctionSignatureParameters() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startFunctionSignatureParameters();
    }
  }

  void startFunctionSignatureParameterMember(const std::string& name, const std::string& type) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startFunctionSignatureParameterMember(name, type);
    }
  }

  void endFunctionSignatureParameterMember() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endFunctionSignatureParameterMember();
    }
  }

  void endFunctionSignatureParameters() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endFunctionSignatureParameters();
    }
  }

  void functionSignatureReturnType(const std::string& name) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->functionSignatureReturnType(name);
    }
  }

  void endFunctionSignature() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endFunctionSignature();
    }
  }

  void endFunctionCommon() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endFunctionCommon();
    }
  }

  void endFunctionDefinition() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endFunctionDefinition();
    }
  }

  void startReturnStatement() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startReturnStatement();
    }
  }

  void endReturnStatement() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endReturnStatement();
    }
  }

  void startIfStatement() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startIfStatement();
    }
  }

  void startIfStatement_Condition() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startIfStatement_Condition();
    }
  }

  void endIfStatement_Condition() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endIfStatement_Condition();
    }
  }

  void startIfStatement_Then() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startIfStatement_Then();
    }
  }

  void endIfStatement_Then() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endIfStatement_Then();
    }
  }

  void startIfStatement_Else() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startIfStatement_Else();
    }
  }

  void endtIfStatement_Else() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endtIfStatement_Else();
    }
  }

  void endIfStatement() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endIfStatement();
    }
  }

  void startStmtExpression() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startStmtExpression();
    }
  }

  void endStmtExpression() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endStmtExpression();
    }
  }

  void startExpressionList() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startExpressionList();
    }
  }

  void startCallExpression(const CallExpression& call) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startCallExpression(call);
    }
  }

  void startAgumentList() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startAgumentList();
    }
  }

  void endAgumentList() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endAgumentList();
    }
  }

  void endCallExpression() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endCallExpression();
    }
  }

  void startBinaryExpression(const BinaryExpression& op) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startBinaryExpression(op);
    }
  }

  void endBinaryExpression() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endBinaryExpression();
    }
  }

  void startInstanceOfExpression() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startInstanceOfExpression();
    }
  }

  void endInstanceOfExpression() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endInstanceOfExpression();
    }
  }

  void startIsOperator() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startIsOperator();
    }
  }

  void endIsOperator() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endIsOperator();
    }
  }

  void startUnaryExpression(const UnaryExpression& op) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startUnaryExpression(op);
    }
  }

  void endUnaryExpression() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endUnaryExpression();
    }
  }

  void startVariableDeclare(const std::string& name, const std::string& type, const std::string& attributes) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startVariableDeclare(name, type, attributes);
    }
  }

  void endVariableDeclare() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endVariableDeclare();
    }
  }

  void startAssignment() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startAssignment();
    }
  }

  void endAssignment() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endAssignment();
    }
  }

  void identifierExpression(const Identifier& id) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->identifierExpression(id);
    }
  }

  void literalStringExpression(const Literal& str) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->literalStringExpression(str);
    }
  }

  void literalNumberExpression(const Literal& str) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->literalNumberExpression(str);
    }
  }

  void literalBooleanExpression(const Literal& str) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->literalBooleanExpression(str);
    }
  }

  void endExpressionList() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endExpressionList();
    }
  }

  void addImport(const StringList& packages) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->addImport(packages);
    }
  }

  void startStmtList() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startStmtList();
    }
  }

  void endStmtList() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endStmtList();
    }
  }

  void startClassDefine(const ClassDefine& class_define) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startClassDefine(class_define);
    }
  }

  void startClassStmt() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startClassStmt();
    }
  }

  void endClassStmt() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endClassStmt();
    }
  }

  void endClassDefine() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endClassDefine();
    }
  }

  void startAttributeList() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->startAttributeList();
    }
  }

  void endAttributelist() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->endAttributelist();
    }
  }

};

}}} // namespace

#endif
