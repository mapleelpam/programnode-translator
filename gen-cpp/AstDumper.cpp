/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#include "AstDumper.h"

namespace tw { namespace maple { namespace generated {

uint32_t AstDumper_startProgram_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->counter);
          this->__isset.counter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_startProgram_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startProgram_args");
  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->version);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("counter", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->counter);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startProgram_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startProgram_pargs");
  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString((*(this->version)));
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("counter", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64((*(this->counter)));
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endProgram_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_endProgram_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endProgram_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endProgram_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endProgram_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startPackage_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->id.clear();
            uint32_t _size46;
            ::apache::thrift::protocol::TType _etype49;
            iprot->readListBegin(_etype49, _size46);
            this->id.resize(_size46);
            uint32_t _i50;
            for (_i50 = 0; _i50 < _size46; ++_i50)
            {
              xfer += iprot->readString(this->id[_i50]);
            }
            iprot->readListEnd();
          }
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_startPackage_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startPackage_args");
  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, this->id.size());
    std::vector<std::string> ::const_iterator _iter51;
    for (_iter51 = this->id.begin(); _iter51 != this->id.end(); ++_iter51)
    {
      xfer += oprot->writeString((*_iter51));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startPackage_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startPackage_pargs");
  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, (*(this->id)).size());
    std::vector<std::string> ::const_iterator _iter52;
    for (_iter52 = (*(this->id)).begin(); _iter52 != (*(this->id)).end(); ++_iter52)
    {
      xfer += oprot->writeString((*_iter52));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endPackage_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->IDs.clear();
            uint32_t _size53;
            ::apache::thrift::protocol::TType _etype56;
            iprot->readListBegin(_etype56, _size53);
            this->IDs.resize(_size53);
            uint32_t _i57;
            for (_i57 = 0; _i57 < _size53; ++_i57)
            {
              xfer += iprot->readString(this->IDs[_i57]);
            }
            iprot->readListEnd();
          }
          this->__isset.IDs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_endPackage_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endPackage_args");
  xfer += oprot->writeFieldBegin("IDs", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, this->IDs.size());
    std::vector<std::string> ::const_iterator _iter58;
    for (_iter58 = this->IDs.begin(); _iter58 != this->IDs.end(); ++_iter58)
    {
      xfer += oprot->writeString((*_iter58));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endPackage_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endPackage_pargs");
  xfer += oprot->writeFieldBegin("IDs", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, (*(this->IDs)).size());
    std::vector<std::string> ::const_iterator _iter59;
    for (_iter59 = (*(this->IDs)).begin(); _iter59 != (*(this->IDs)).end(); ++_iter59)
    {
      xfer += oprot->writeString((*_iter59));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_executeImport_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->id.clear();
            uint32_t _size60;
            ::apache::thrift::protocol::TType _etype63;
            iprot->readListBegin(_etype63, _size60);
            this->id.resize(_size60);
            uint32_t _i64;
            for (_i64 = 0; _i64 < _size60; ++_i64)
            {
              xfer += iprot->readString(this->id[_i64]);
            }
            iprot->readListEnd();
          }
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_executeImport_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_executeImport_args");
  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, this->id.size());
    std::vector<std::string> ::const_iterator _iter65;
    for (_iter65 = this->id.begin(); _iter65 != this->id.end(); ++_iter65)
    {
      xfer += oprot->writeString((*_iter65));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_executeImport_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_executeImport_pargs");
  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, (*(this->id)).size());
    std::vector<std::string> ::const_iterator _iter66;
    for (_iter66 = (*(this->id)).begin(); _iter66 != (*(this->id)).end(); ++_iter66)
    {
      xfer += oprot->writeString((*_iter66));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startFunctionDefinition_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isAbstract);
          this->__isset.isAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_startFunctionDefinition_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startFunctionDefinition_args");
  xfer += oprot->writeFieldBegin("isAbstract", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->isAbstract);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startFunctionDefinition_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startFunctionDefinition_pargs");
  xfer += oprot->writeFieldBegin("isAbstract", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool((*(this->isAbstract)));
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_functionAttribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->attrs.clear();
            uint32_t _size67;
            ::apache::thrift::protocol::TType _etype70;
            iprot->readListBegin(_etype70, _size67);
            this->attrs.resize(_size67);
            uint32_t _i71;
            for (_i71 = 0; _i71 < _size67; ++_i71)
            {
              xfer += iprot->readString(this->attrs[_i71]);
            }
            iprot->readListEnd();
          }
          this->__isset.attrs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_functionAttribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_functionAttribute_args");
  xfer += oprot->writeFieldBegin("attrs", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, this->attrs.size());
    std::vector<std::string> ::const_iterator _iter72;
    for (_iter72 = this->attrs.begin(); _iter72 != this->attrs.end(); ++_iter72)
    {
      xfer += oprot->writeString((*_iter72));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_functionAttribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_functionAttribute_pargs");
  xfer += oprot->writeFieldBegin("attrs", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, (*(this->attrs)).size());
    std::vector<std::string> ::const_iterator _iter73;
    for (_iter73 = (*(this->attrs)).begin(); _iter73 != (*(this->attrs)).end(); ++_iter73)
    {
      xfer += oprot->writeString((*_iter73));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_functionName_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast74;
          xfer += iprot->readI32(ecast74);
          this->func_type = (FunctionType::type)ecast74;
          this->__isset.func_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_functionName_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_functionName_args");
  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("func_type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->func_type);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_functionName_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_functionName_pargs");
  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString((*(this->name)));
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("func_type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)(*(this->func_type)));
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startFunctionCommon_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_startFunctionCommon_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startFunctionCommon_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startFunctionCommon_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startFunctionCommon_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startFunctionSignature_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_startFunctionSignature_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startFunctionSignature_args");
  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->type);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startFunctionSignature_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startFunctionSignature_pargs");
  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString((*(this->type)));
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startFunctionSignatureParameters_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_startFunctionSignatureParameters_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startFunctionSignatureParameters_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startFunctionSignatureParameters_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startFunctionSignatureParameters_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startFunctionSignatureParameterMember_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->type.clear();
            uint32_t _size75;
            ::apache::thrift::protocol::TType _etype78;
            iprot->readListBegin(_etype78, _size75);
            this->type.resize(_size75);
            uint32_t _i79;
            for (_i79 = 0; _i79 < _size75; ++_i79)
            {
              xfer += iprot->readString(this->type[_i79]);
            }
            iprot->readListEnd();
          }
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_init);
          this->__isset.has_init = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->init);
          this->__isset.init = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_startFunctionSignatureParameterMember_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startFunctionSignatureParameterMember_args");
  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, this->type.size());
    std::vector<std::string> ::const_iterator _iter80;
    for (_iter80 = this->type.begin(); _iter80 != this->type.end(); ++_iter80)
    {
      xfer += oprot->writeString((*_iter80));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("has_init", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_init);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("init", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->init);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startFunctionSignatureParameterMember_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startFunctionSignatureParameterMember_pargs");
  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString((*(this->name)));
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, (*(this->type)).size());
    std::vector<std::string> ::const_iterator _iter81;
    for (_iter81 = (*(this->type)).begin(); _iter81 != (*(this->type)).end(); ++_iter81)
    {
      xfer += oprot->writeString((*_iter81));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("has_init", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool((*(this->has_init)));
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("init", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString((*(this->init)));
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endFunctionSignatureParameterMember_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_endFunctionSignatureParameterMember_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endFunctionSignatureParameterMember_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endFunctionSignatureParameterMember_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endFunctionSignatureParameterMember_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endFunctionSignatureParameters_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_endFunctionSignatureParameters_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endFunctionSignatureParameters_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endFunctionSignatureParameters_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endFunctionSignatureParameters_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endFunctionSignature_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_endFunctionSignature_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endFunctionSignature_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endFunctionSignature_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endFunctionSignature_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endFunctionCommon_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_endFunctionCommon_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endFunctionCommon_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endFunctionCommon_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endFunctionCommon_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endFunctionDefinition_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_endFunctionDefinition_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endFunctionDefinition_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endFunctionDefinition_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endFunctionDefinition_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startReturnStatement_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_startReturnStatement_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startReturnStatement_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startReturnStatement_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startReturnStatement_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endReturnStatement_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_endReturnStatement_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endReturnStatement_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endReturnStatement_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endReturnStatement_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startExprCondition_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_startExprCondition_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startExprCondition_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startExprCondition_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startExprCondition_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endExprCondition_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_endExprCondition_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endExprCondition_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endExprCondition_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endExprCondition_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startIfStatement_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_startIfStatement_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startIfStatement_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startIfStatement_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startIfStatement_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endIfStatement_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_endIfStatement_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endIfStatement_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endIfStatement_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endIfStatement_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startStmtExpression_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_startStmtExpression_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startStmtExpression_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startStmtExpression_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startStmtExpression_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endStmtExpression_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_endStmtExpression_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endStmtExpression_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endStmtExpression_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endStmtExpression_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startExpressionList_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_startExpressionList_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startExpressionList_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startExpressionList_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startExpressionList_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startCallExpression_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->call.read(iprot);
          this->__isset.call = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_startCallExpression_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startCallExpression_args");
  xfer += oprot->writeFieldBegin("call", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->call.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startCallExpression_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startCallExpression_pargs");
  xfer += oprot->writeFieldBegin("call", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->call)).write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startArgumentList_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_startArgumentList_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startArgumentList_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startArgumentList_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startArgumentList_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startOneArgument_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_startOneArgument_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startOneArgument_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startOneArgument_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startOneArgument_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endOneArgument_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_endOneArgument_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endOneArgument_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endOneArgument_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endOneArgument_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endArgumentList_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_endArgumentList_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endArgumentList_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endArgumentList_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endArgumentList_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endCallExpression_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_endCallExpression_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endCallExpression_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endCallExpression_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endCallExpression_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startBinaryExpression_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->op.read(iprot);
          this->__isset.op = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_startBinaryExpression_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startBinaryExpression_args");
  xfer += oprot->writeFieldBegin("op", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->op.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startBinaryExpression_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startBinaryExpression_pargs");
  xfer += oprot->writeFieldBegin("op", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->op)).write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endBinaryExpression_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_endBinaryExpression_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endBinaryExpression_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endBinaryExpression_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endBinaryExpression_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startInstanceOfExpression_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_startInstanceOfExpression_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startInstanceOfExpression_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startInstanceOfExpression_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startInstanceOfExpression_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endInstanceOfExpression_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_endInstanceOfExpression_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endInstanceOfExpression_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endInstanceOfExpression_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endInstanceOfExpression_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startIsOperator_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_startIsOperator_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startIsOperator_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startIsOperator_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startIsOperator_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endIsOperator_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_endIsOperator_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endIsOperator_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endIsOperator_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endIsOperator_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startUnaryExpression_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->op.read(iprot);
          this->__isset.op = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_startUnaryExpression_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startUnaryExpression_args");
  xfer += oprot->writeFieldBegin("op", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->op.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startUnaryExpression_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startUnaryExpression_pargs");
  xfer += oprot->writeFieldBegin("op", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->op)).write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endUnaryExpression_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_endUnaryExpression_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endUnaryExpression_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endUnaryExpression_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endUnaryExpression_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startVariableDeclare_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->var_decl.read(iprot);
          this->__isset.var_decl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_startVariableDeclare_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startVariableDeclare_args");
  xfer += oprot->writeFieldBegin("var_decl", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->var_decl.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startVariableDeclare_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startVariableDeclare_pargs");
  xfer += oprot->writeFieldBegin("var_decl", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->var_decl)).write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endVariableDeclare_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_endVariableDeclare_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endVariableDeclare_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endVariableDeclare_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endVariableDeclare_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startAssignment_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_startAssignment_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startAssignment_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startAssignment_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startAssignment_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endAssignment_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_endAssignment_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endAssignment_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endAssignment_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endAssignment_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_identifierExpression_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->id.read(iprot);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_identifierExpression_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_identifierExpression_args");
  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->id.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_identifierExpression_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_identifierExpression_pargs");
  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->id)).write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_literalStringExpression_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->str.read(iprot);
          this->__isset.str = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_literalStringExpression_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_literalStringExpression_args");
  xfer += oprot->writeFieldBegin("str", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->str.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_literalStringExpression_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_literalStringExpression_pargs");
  xfer += oprot->writeFieldBegin("str", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->str)).write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_literalNumberExpression_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->str.read(iprot);
          this->__isset.str = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_literalNumberExpression_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_literalNumberExpression_args");
  xfer += oprot->writeFieldBegin("str", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->str.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_literalNumberExpression_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_literalNumberExpression_pargs");
  xfer += oprot->writeFieldBegin("str", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->str)).write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_literalBooleanExpression_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->str.read(iprot);
          this->__isset.str = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_literalBooleanExpression_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_literalBooleanExpression_args");
  xfer += oprot->writeFieldBegin("str", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->str.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_literalBooleanExpression_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_literalBooleanExpression_pargs");
  xfer += oprot->writeFieldBegin("str", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->str)).write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_literalNull_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_literalNull_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_literalNull_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_literalNull_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_literalNull_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endExpressionList_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_endExpressionList_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endExpressionList_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endExpressionList_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endExpressionList_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_addImport_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->packages.clear();
            uint32_t _size82;
            ::apache::thrift::protocol::TType _etype85;
            iprot->readListBegin(_etype85, _size82);
            this->packages.resize(_size82);
            uint32_t _i86;
            for (_i86 = 0; _i86 < _size82; ++_i86)
            {
              xfer += iprot->readString(this->packages[_i86]);
            }
            iprot->readListEnd();
          }
          this->__isset.packages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_addImport_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_addImport_args");
  xfer += oprot->writeFieldBegin("packages", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, this->packages.size());
    std::vector<std::string> ::const_iterator _iter87;
    for (_iter87 = this->packages.begin(); _iter87 != this->packages.end(); ++_iter87)
    {
      xfer += oprot->writeString((*_iter87));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_addImport_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_addImport_pargs");
  xfer += oprot->writeFieldBegin("packages", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, (*(this->packages)).size());
    std::vector<std::string> ::const_iterator _iter88;
    for (_iter88 = (*(this->packages)).begin(); _iter88 != (*(this->packages)).end(); ++_iter88)
    {
      xfer += oprot->writeString((*_iter88));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startStmtList_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_startStmtList_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startStmtList_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startStmtList_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startStmtList_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endStmtList_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_endStmtList_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endStmtList_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endStmtList_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endStmtList_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startScope_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_startScope_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startScope_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startScope_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startScope_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endScope_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_endScope_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endScope_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endScope_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endScope_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startClassDefinition_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->class_define.read(iprot);
          this->__isset.class_define = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_startClassDefinition_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startClassDefinition_args");
  xfer += oprot->writeFieldBegin("class_define", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->class_define.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startClassDefinition_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startClassDefinition_pargs");
  xfer += oprot->writeFieldBegin("class_define", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->class_define)).write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startClassStmt_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_startClassStmt_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startClassStmt_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startClassStmt_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startClassStmt_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endClassStmt_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_endClassStmt_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endClassStmt_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endClassStmt_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endClassStmt_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endClassDefinition_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_endClassDefinition_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endClassDefinition_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endClassDefinition_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endClassDefinition_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startMemberExpression_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_startMemberExpression_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startMemberExpression_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startMemberExpression_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startMemberExpression_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endMemberExpression_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_endMemberExpression_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endMemberExpression_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endMemberExpression_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endMemberExpression_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startForStatement_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_startForStatement_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startForStatement_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startForStatement_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startForStatement_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startForInit_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_startForInit_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startForInit_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startForInit_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startForInit_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endForInit_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_endForInit_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endForInit_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endForInit_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endForInit_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startForStep_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_startForStep_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startForStep_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startForStep_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startForStep_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endForStep_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_endForStep_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endForStep_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endForStep_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endForStep_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endForStatement_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_endForStatement_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endForStatement_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endForStatement_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endForStatement_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startDoStatement_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_startDoStatement_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startDoStatement_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startDoStatement_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startDoStatement_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endDoStatement_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_endDoStatement_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endDoStatement_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endDoStatement_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endDoStatement_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startWhileStatement_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_startWhileStatement_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startWhileStatement_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startWhileStatement_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startWhileStatement_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endWhileStatement_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_endWhileStatement_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endWhileStatement_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endWhileStatement_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endWhileStatement_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_defineMetaData_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->metadata.read(iprot);
          this->__isset.metadata = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_defineMetaData_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_defineMetaData_args");
  xfer += oprot->writeFieldBegin("metadata", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->metadata.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_defineMetaData_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_defineMetaData_pargs");
  xfer += oprot->writeFieldBegin("metadata", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->metadata)).write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void AstDumperClient::startProgram(const std::string& version, const int64_t counter)
{
  send_startProgram(version, counter);
}

void AstDumperClient::send_startProgram(const std::string& version, const int64_t counter)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startProgram", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_startProgram_pargs args;
  args.version = &version;
  args.counter = &counter;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::endProgram()
{
  send_endProgram();
}

void AstDumperClient::send_endProgram()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("endProgram", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_endProgram_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::startPackage(const std::vector<std::string> & id)
{
  send_startPackage(id);
}

void AstDumperClient::send_startPackage(const std::vector<std::string> & id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startPackage", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_startPackage_pargs args;
  args.id = &id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::endPackage(const std::vector<std::string> & IDs)
{
  send_endPackage(IDs);
}

void AstDumperClient::send_endPackage(const std::vector<std::string> & IDs)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("endPackage", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_endPackage_pargs args;
  args.IDs = &IDs;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::executeImport(const std::vector<std::string> & id)
{
  send_executeImport(id);
}

void AstDumperClient::send_executeImport(const std::vector<std::string> & id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("executeImport", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_executeImport_pargs args;
  args.id = &id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::startFunctionDefinition(const bool isAbstract)
{
  send_startFunctionDefinition(isAbstract);
}

void AstDumperClient::send_startFunctionDefinition(const bool isAbstract)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startFunctionDefinition", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_startFunctionDefinition_pargs args;
  args.isAbstract = &isAbstract;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::functionAttribute(const std::vector<std::string> & attrs)
{
  send_functionAttribute(attrs);
}

void AstDumperClient::send_functionAttribute(const std::vector<std::string> & attrs)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("functionAttribute", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_functionAttribute_pargs args;
  args.attrs = &attrs;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::functionName(const std::string& name, const FunctionType::type func_type)
{
  send_functionName(name, func_type);
}

void AstDumperClient::send_functionName(const std::string& name, const FunctionType::type func_type)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("functionName", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_functionName_pargs args;
  args.name = &name;
  args.func_type = &func_type;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::startFunctionCommon()
{
  send_startFunctionCommon();
}

void AstDumperClient::send_startFunctionCommon()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startFunctionCommon", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_startFunctionCommon_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::startFunctionSignature(const std::string& type)
{
  send_startFunctionSignature(type);
}

void AstDumperClient::send_startFunctionSignature(const std::string& type)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startFunctionSignature", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_startFunctionSignature_pargs args;
  args.type = &type;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::startFunctionSignatureParameters()
{
  send_startFunctionSignatureParameters();
}

void AstDumperClient::send_startFunctionSignatureParameters()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startFunctionSignatureParameters", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_startFunctionSignatureParameters_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::startFunctionSignatureParameterMember(const std::string& name, const std::vector<std::string> & type, const bool has_init, const std::string& init)
{
  send_startFunctionSignatureParameterMember(name, type, has_init, init);
}

void AstDumperClient::send_startFunctionSignatureParameterMember(const std::string& name, const std::vector<std::string> & type, const bool has_init, const std::string& init)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startFunctionSignatureParameterMember", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_startFunctionSignatureParameterMember_pargs args;
  args.name = &name;
  args.type = &type;
  args.has_init = &has_init;
  args.init = &init;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::endFunctionSignatureParameterMember()
{
  send_endFunctionSignatureParameterMember();
}

void AstDumperClient::send_endFunctionSignatureParameterMember()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("endFunctionSignatureParameterMember", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_endFunctionSignatureParameterMember_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::endFunctionSignatureParameters()
{
  send_endFunctionSignatureParameters();
}

void AstDumperClient::send_endFunctionSignatureParameters()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("endFunctionSignatureParameters", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_endFunctionSignatureParameters_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::endFunctionSignature()
{
  send_endFunctionSignature();
}

void AstDumperClient::send_endFunctionSignature()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("endFunctionSignature", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_endFunctionSignature_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::endFunctionCommon()
{
  send_endFunctionCommon();
}

void AstDumperClient::send_endFunctionCommon()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("endFunctionCommon", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_endFunctionCommon_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::endFunctionDefinition()
{
  send_endFunctionDefinition();
}

void AstDumperClient::send_endFunctionDefinition()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("endFunctionDefinition", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_endFunctionDefinition_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::startReturnStatement()
{
  send_startReturnStatement();
}

void AstDumperClient::send_startReturnStatement()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startReturnStatement", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_startReturnStatement_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::endReturnStatement()
{
  send_endReturnStatement();
}

void AstDumperClient::send_endReturnStatement()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("endReturnStatement", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_endReturnStatement_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::startExprCondition()
{
  send_startExprCondition();
}

void AstDumperClient::send_startExprCondition()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startExprCondition", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_startExprCondition_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::endExprCondition()
{
  send_endExprCondition();
}

void AstDumperClient::send_endExprCondition()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("endExprCondition", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_endExprCondition_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::startIfStatement()
{
  send_startIfStatement();
}

void AstDumperClient::send_startIfStatement()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startIfStatement", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_startIfStatement_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::endIfStatement()
{
  send_endIfStatement();
}

void AstDumperClient::send_endIfStatement()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("endIfStatement", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_endIfStatement_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::startStmtExpression()
{
  send_startStmtExpression();
}

void AstDumperClient::send_startStmtExpression()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startStmtExpression", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_startStmtExpression_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::endStmtExpression()
{
  send_endStmtExpression();
}

void AstDumperClient::send_endStmtExpression()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("endStmtExpression", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_endStmtExpression_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::startExpressionList()
{
  send_startExpressionList();
}

void AstDumperClient::send_startExpressionList()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startExpressionList", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_startExpressionList_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::startCallExpression(const CallExpression& call)
{
  send_startCallExpression(call);
}

void AstDumperClient::send_startCallExpression(const CallExpression& call)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startCallExpression", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_startCallExpression_pargs args;
  args.call = &call;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::startArgumentList()
{
  send_startArgumentList();
}

void AstDumperClient::send_startArgumentList()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startArgumentList", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_startArgumentList_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::startOneArgument()
{
  send_startOneArgument();
}

void AstDumperClient::send_startOneArgument()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startOneArgument", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_startOneArgument_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::endOneArgument()
{
  send_endOneArgument();
}

void AstDumperClient::send_endOneArgument()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("endOneArgument", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_endOneArgument_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::endArgumentList()
{
  send_endArgumentList();
}

void AstDumperClient::send_endArgumentList()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("endArgumentList", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_endArgumentList_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::endCallExpression()
{
  send_endCallExpression();
}

void AstDumperClient::send_endCallExpression()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("endCallExpression", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_endCallExpression_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::startBinaryExpression(const BinaryExpression& op)
{
  send_startBinaryExpression(op);
}

void AstDumperClient::send_startBinaryExpression(const BinaryExpression& op)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startBinaryExpression", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_startBinaryExpression_pargs args;
  args.op = &op;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::endBinaryExpression()
{
  send_endBinaryExpression();
}

void AstDumperClient::send_endBinaryExpression()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("endBinaryExpression", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_endBinaryExpression_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::startInstanceOfExpression()
{
  send_startInstanceOfExpression();
}

void AstDumperClient::send_startInstanceOfExpression()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startInstanceOfExpression", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_startInstanceOfExpression_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::endInstanceOfExpression()
{
  send_endInstanceOfExpression();
}

void AstDumperClient::send_endInstanceOfExpression()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("endInstanceOfExpression", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_endInstanceOfExpression_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::startIsOperator()
{
  send_startIsOperator();
}

void AstDumperClient::send_startIsOperator()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startIsOperator", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_startIsOperator_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::endIsOperator()
{
  send_endIsOperator();
}

void AstDumperClient::send_endIsOperator()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("endIsOperator", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_endIsOperator_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::startUnaryExpression(const UnaryExpression& op)
{
  send_startUnaryExpression(op);
}

void AstDumperClient::send_startUnaryExpression(const UnaryExpression& op)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startUnaryExpression", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_startUnaryExpression_pargs args;
  args.op = &op;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::endUnaryExpression()
{
  send_endUnaryExpression();
}

void AstDumperClient::send_endUnaryExpression()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("endUnaryExpression", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_endUnaryExpression_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::startVariableDeclare(const VariableDeclare& var_decl)
{
  send_startVariableDeclare(var_decl);
}

void AstDumperClient::send_startVariableDeclare(const VariableDeclare& var_decl)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startVariableDeclare", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_startVariableDeclare_pargs args;
  args.var_decl = &var_decl;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::endVariableDeclare()
{
  send_endVariableDeclare();
}

void AstDumperClient::send_endVariableDeclare()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("endVariableDeclare", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_endVariableDeclare_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::startAssignment()
{
  send_startAssignment();
}

void AstDumperClient::send_startAssignment()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startAssignment", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_startAssignment_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::endAssignment()
{
  send_endAssignment();
}

void AstDumperClient::send_endAssignment()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("endAssignment", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_endAssignment_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::identifierExpression(const Identifier& id)
{
  send_identifierExpression(id);
}

void AstDumperClient::send_identifierExpression(const Identifier& id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("identifierExpression", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_identifierExpression_pargs args;
  args.id = &id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::literalStringExpression(const Literal& str)
{
  send_literalStringExpression(str);
}

void AstDumperClient::send_literalStringExpression(const Literal& str)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("literalStringExpression", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_literalStringExpression_pargs args;
  args.str = &str;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::literalNumberExpression(const Literal& str)
{
  send_literalNumberExpression(str);
}

void AstDumperClient::send_literalNumberExpression(const Literal& str)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("literalNumberExpression", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_literalNumberExpression_pargs args;
  args.str = &str;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::literalBooleanExpression(const Literal& str)
{
  send_literalBooleanExpression(str);
}

void AstDumperClient::send_literalBooleanExpression(const Literal& str)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("literalBooleanExpression", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_literalBooleanExpression_pargs args;
  args.str = &str;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::literalNull()
{
  send_literalNull();
}

void AstDumperClient::send_literalNull()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("literalNull", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_literalNull_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::endExpressionList()
{
  send_endExpressionList();
}

void AstDumperClient::send_endExpressionList()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("endExpressionList", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_endExpressionList_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::addImport(const std::vector<std::string> & packages)
{
  send_addImport(packages);
}

void AstDumperClient::send_addImport(const std::vector<std::string> & packages)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("addImport", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_addImport_pargs args;
  args.packages = &packages;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::startStmtList()
{
  send_startStmtList();
}

void AstDumperClient::send_startStmtList()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startStmtList", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_startStmtList_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::endStmtList()
{
  send_endStmtList();
}

void AstDumperClient::send_endStmtList()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("endStmtList", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_endStmtList_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::startScope()
{
  send_startScope();
}

void AstDumperClient::send_startScope()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startScope", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_startScope_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::endScope()
{
  send_endScope();
}

void AstDumperClient::send_endScope()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("endScope", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_endScope_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::startClassDefinition(const ClassDefinition& class_define)
{
  send_startClassDefinition(class_define);
}

void AstDumperClient::send_startClassDefinition(const ClassDefinition& class_define)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startClassDefinition", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_startClassDefinition_pargs args;
  args.class_define = &class_define;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::startClassStmt()
{
  send_startClassStmt();
}

void AstDumperClient::send_startClassStmt()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startClassStmt", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_startClassStmt_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::endClassStmt()
{
  send_endClassStmt();
}

void AstDumperClient::send_endClassStmt()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("endClassStmt", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_endClassStmt_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::endClassDefinition()
{
  send_endClassDefinition();
}

void AstDumperClient::send_endClassDefinition()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("endClassDefinition", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_endClassDefinition_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::startMemberExpression()
{
  send_startMemberExpression();
}

void AstDumperClient::send_startMemberExpression()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startMemberExpression", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_startMemberExpression_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::endMemberExpression()
{
  send_endMemberExpression();
}

void AstDumperClient::send_endMemberExpression()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("endMemberExpression", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_endMemberExpression_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::startForStatement()
{
  send_startForStatement();
}

void AstDumperClient::send_startForStatement()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startForStatement", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_startForStatement_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::startForInit()
{
  send_startForInit();
}

void AstDumperClient::send_startForInit()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startForInit", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_startForInit_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::endForInit()
{
  send_endForInit();
}

void AstDumperClient::send_endForInit()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("endForInit", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_endForInit_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::startForStep()
{
  send_startForStep();
}

void AstDumperClient::send_startForStep()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startForStep", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_startForStep_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::endForStep()
{
  send_endForStep();
}

void AstDumperClient::send_endForStep()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("endForStep", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_endForStep_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::endForStatement()
{
  send_endForStatement();
}

void AstDumperClient::send_endForStatement()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("endForStatement", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_endForStatement_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::startDoStatement()
{
  send_startDoStatement();
}

void AstDumperClient::send_startDoStatement()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startDoStatement", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_startDoStatement_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::endDoStatement()
{
  send_endDoStatement();
}

void AstDumperClient::send_endDoStatement()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("endDoStatement", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_endDoStatement_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::startWhileStatement()
{
  send_startWhileStatement();
}

void AstDumperClient::send_startWhileStatement()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startWhileStatement", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_startWhileStatement_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::endWhileStatement()
{
  send_endWhileStatement();
}

void AstDumperClient::send_endWhileStatement()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("endWhileStatement", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_endWhileStatement_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::defineMetaData(const MetaData& metadata)
{
  send_defineMetaData(metadata);
}

void AstDumperClient::send_defineMetaData(const MetaData& metadata)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("defineMetaData", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_defineMetaData_pargs args;
  args.metadata = &metadata;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

bool AstDumperProcessor::process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot, void* callContext) {

  ::apache::thrift::protocol::TProtocol* iprot = piprot.get();
  ::apache::thrift::protocol::TProtocol* oprot = poprot.get();
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;
  int32_t seqid;

  iprot->readMessageBegin(fname, mtype, seqid);

  if (mtype != ::apache::thrift::protocol::T_CALL && mtype != ::apache::thrift::protocol::T_ONEWAY) {
    iprot->skip(::apache::thrift::protocol::T_STRUCT);
    iprot->readMessageEnd();
    iprot->getTransport()->readEnd();
    ::apache::thrift::TApplicationException x(::apache::thrift::TApplicationException::INVALID_MESSAGE_TYPE);
    oprot->writeMessageBegin(fname, ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return true;
  }

  return process_fn(iprot, oprot, fname, seqid, callContext);
}

bool AstDumperProcessor::process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext) {
  std::map<std::string, void (AstDumperProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*)>::iterator pfn;
  pfn = processMap_.find(fname);
  if (pfn == processMap_.end()) {
    iprot->skip(::apache::thrift::protocol::T_STRUCT);
    iprot->readMessageEnd();
    iprot->getTransport()->readEnd();
    ::apache::thrift::TApplicationException x(::apache::thrift::TApplicationException::UNKNOWN_METHOD, "Invalid method name: '"+fname+"'");
    oprot->writeMessageBegin(fname, ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return true;
  }
  (this->*(pfn->second))(seqid, iprot, oprot, callContext);
  return true;
}

void AstDumperProcessor::process_startProgram(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.startProgram", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.startProgram");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.startProgram");
  }

  AstDumper_startProgram_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.startProgram", bytes);
  }

  try {
    iface_->startProgram(args.version, args.counter);
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.startProgram");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.startProgram");
  }

  return;
}

void AstDumperProcessor::process_endProgram(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.endProgram", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.endProgram");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.endProgram");
  }

  AstDumper_endProgram_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.endProgram", bytes);
  }

  try {
    iface_->endProgram();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.endProgram");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.endProgram");
  }

  return;
}

void AstDumperProcessor::process_startPackage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.startPackage", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.startPackage");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.startPackage");
  }

  AstDumper_startPackage_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.startPackage", bytes);
  }

  try {
    iface_->startPackage(args.id);
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.startPackage");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.startPackage");
  }

  return;
}

void AstDumperProcessor::process_endPackage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.endPackage", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.endPackage");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.endPackage");
  }

  AstDumper_endPackage_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.endPackage", bytes);
  }

  try {
    iface_->endPackage(args.IDs);
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.endPackage");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.endPackage");
  }

  return;
}

void AstDumperProcessor::process_executeImport(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.executeImport", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.executeImport");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.executeImport");
  }

  AstDumper_executeImport_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.executeImport", bytes);
  }

  try {
    iface_->executeImport(args.id);
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.executeImport");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.executeImport");
  }

  return;
}

void AstDumperProcessor::process_startFunctionDefinition(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.startFunctionDefinition", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.startFunctionDefinition");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.startFunctionDefinition");
  }

  AstDumper_startFunctionDefinition_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.startFunctionDefinition", bytes);
  }

  try {
    iface_->startFunctionDefinition(args.isAbstract);
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.startFunctionDefinition");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.startFunctionDefinition");
  }

  return;
}

void AstDumperProcessor::process_functionAttribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.functionAttribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.functionAttribute");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.functionAttribute");
  }

  AstDumper_functionAttribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.functionAttribute", bytes);
  }

  try {
    iface_->functionAttribute(args.attrs);
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.functionAttribute");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.functionAttribute");
  }

  return;
}

void AstDumperProcessor::process_functionName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.functionName", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.functionName");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.functionName");
  }

  AstDumper_functionName_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.functionName", bytes);
  }

  try {
    iface_->functionName(args.name, args.func_type);
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.functionName");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.functionName");
  }

  return;
}

void AstDumperProcessor::process_startFunctionCommon(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.startFunctionCommon", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.startFunctionCommon");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.startFunctionCommon");
  }

  AstDumper_startFunctionCommon_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.startFunctionCommon", bytes);
  }

  try {
    iface_->startFunctionCommon();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.startFunctionCommon");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.startFunctionCommon");
  }

  return;
}

void AstDumperProcessor::process_startFunctionSignature(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.startFunctionSignature", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.startFunctionSignature");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.startFunctionSignature");
  }

  AstDumper_startFunctionSignature_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.startFunctionSignature", bytes);
  }

  try {
    iface_->startFunctionSignature(args.type);
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.startFunctionSignature");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.startFunctionSignature");
  }

  return;
}

void AstDumperProcessor::process_startFunctionSignatureParameters(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.startFunctionSignatureParameters", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.startFunctionSignatureParameters");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.startFunctionSignatureParameters");
  }

  AstDumper_startFunctionSignatureParameters_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.startFunctionSignatureParameters", bytes);
  }

  try {
    iface_->startFunctionSignatureParameters();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.startFunctionSignatureParameters");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.startFunctionSignatureParameters");
  }

  return;
}

void AstDumperProcessor::process_startFunctionSignatureParameterMember(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.startFunctionSignatureParameterMember", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.startFunctionSignatureParameterMember");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.startFunctionSignatureParameterMember");
  }

  AstDumper_startFunctionSignatureParameterMember_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.startFunctionSignatureParameterMember", bytes);
  }

  try {
    iface_->startFunctionSignatureParameterMember(args.name, args.type, args.has_init, args.init);
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.startFunctionSignatureParameterMember");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.startFunctionSignatureParameterMember");
  }

  return;
}

void AstDumperProcessor::process_endFunctionSignatureParameterMember(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.endFunctionSignatureParameterMember", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.endFunctionSignatureParameterMember");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.endFunctionSignatureParameterMember");
  }

  AstDumper_endFunctionSignatureParameterMember_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.endFunctionSignatureParameterMember", bytes);
  }

  try {
    iface_->endFunctionSignatureParameterMember();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.endFunctionSignatureParameterMember");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.endFunctionSignatureParameterMember");
  }

  return;
}

void AstDumperProcessor::process_endFunctionSignatureParameters(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.endFunctionSignatureParameters", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.endFunctionSignatureParameters");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.endFunctionSignatureParameters");
  }

  AstDumper_endFunctionSignatureParameters_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.endFunctionSignatureParameters", bytes);
  }

  try {
    iface_->endFunctionSignatureParameters();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.endFunctionSignatureParameters");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.endFunctionSignatureParameters");
  }

  return;
}

void AstDumperProcessor::process_endFunctionSignature(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.endFunctionSignature", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.endFunctionSignature");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.endFunctionSignature");
  }

  AstDumper_endFunctionSignature_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.endFunctionSignature", bytes);
  }

  try {
    iface_->endFunctionSignature();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.endFunctionSignature");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.endFunctionSignature");
  }

  return;
}

void AstDumperProcessor::process_endFunctionCommon(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.endFunctionCommon", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.endFunctionCommon");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.endFunctionCommon");
  }

  AstDumper_endFunctionCommon_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.endFunctionCommon", bytes);
  }

  try {
    iface_->endFunctionCommon();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.endFunctionCommon");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.endFunctionCommon");
  }

  return;
}

void AstDumperProcessor::process_endFunctionDefinition(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.endFunctionDefinition", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.endFunctionDefinition");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.endFunctionDefinition");
  }

  AstDumper_endFunctionDefinition_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.endFunctionDefinition", bytes);
  }

  try {
    iface_->endFunctionDefinition();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.endFunctionDefinition");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.endFunctionDefinition");
  }

  return;
}

void AstDumperProcessor::process_startReturnStatement(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.startReturnStatement", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.startReturnStatement");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.startReturnStatement");
  }

  AstDumper_startReturnStatement_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.startReturnStatement", bytes);
  }

  try {
    iface_->startReturnStatement();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.startReturnStatement");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.startReturnStatement");
  }

  return;
}

void AstDumperProcessor::process_endReturnStatement(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.endReturnStatement", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.endReturnStatement");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.endReturnStatement");
  }

  AstDumper_endReturnStatement_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.endReturnStatement", bytes);
  }

  try {
    iface_->endReturnStatement();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.endReturnStatement");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.endReturnStatement");
  }

  return;
}

void AstDumperProcessor::process_startExprCondition(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.startExprCondition", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.startExprCondition");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.startExprCondition");
  }

  AstDumper_startExprCondition_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.startExprCondition", bytes);
  }

  try {
    iface_->startExprCondition();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.startExprCondition");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.startExprCondition");
  }

  return;
}

void AstDumperProcessor::process_endExprCondition(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.endExprCondition", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.endExprCondition");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.endExprCondition");
  }

  AstDumper_endExprCondition_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.endExprCondition", bytes);
  }

  try {
    iface_->endExprCondition();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.endExprCondition");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.endExprCondition");
  }

  return;
}

void AstDumperProcessor::process_startIfStatement(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.startIfStatement", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.startIfStatement");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.startIfStatement");
  }

  AstDumper_startIfStatement_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.startIfStatement", bytes);
  }

  try {
    iface_->startIfStatement();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.startIfStatement");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.startIfStatement");
  }

  return;
}

void AstDumperProcessor::process_endIfStatement(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.endIfStatement", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.endIfStatement");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.endIfStatement");
  }

  AstDumper_endIfStatement_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.endIfStatement", bytes);
  }

  try {
    iface_->endIfStatement();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.endIfStatement");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.endIfStatement");
  }

  return;
}

void AstDumperProcessor::process_startStmtExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.startStmtExpression", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.startStmtExpression");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.startStmtExpression");
  }

  AstDumper_startStmtExpression_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.startStmtExpression", bytes);
  }

  try {
    iface_->startStmtExpression();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.startStmtExpression");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.startStmtExpression");
  }

  return;
}

void AstDumperProcessor::process_endStmtExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.endStmtExpression", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.endStmtExpression");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.endStmtExpression");
  }

  AstDumper_endStmtExpression_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.endStmtExpression", bytes);
  }

  try {
    iface_->endStmtExpression();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.endStmtExpression");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.endStmtExpression");
  }

  return;
}

void AstDumperProcessor::process_startExpressionList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.startExpressionList", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.startExpressionList");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.startExpressionList");
  }

  AstDumper_startExpressionList_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.startExpressionList", bytes);
  }

  try {
    iface_->startExpressionList();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.startExpressionList");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.startExpressionList");
  }

  return;
}

void AstDumperProcessor::process_startCallExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.startCallExpression", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.startCallExpression");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.startCallExpression");
  }

  AstDumper_startCallExpression_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.startCallExpression", bytes);
  }

  try {
    iface_->startCallExpression(args.call);
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.startCallExpression");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.startCallExpression");
  }

  return;
}

void AstDumperProcessor::process_startArgumentList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.startArgumentList", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.startArgumentList");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.startArgumentList");
  }

  AstDumper_startArgumentList_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.startArgumentList", bytes);
  }

  try {
    iface_->startArgumentList();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.startArgumentList");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.startArgumentList");
  }

  return;
}

void AstDumperProcessor::process_startOneArgument(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.startOneArgument", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.startOneArgument");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.startOneArgument");
  }

  AstDumper_startOneArgument_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.startOneArgument", bytes);
  }

  try {
    iface_->startOneArgument();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.startOneArgument");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.startOneArgument");
  }

  return;
}

void AstDumperProcessor::process_endOneArgument(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.endOneArgument", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.endOneArgument");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.endOneArgument");
  }

  AstDumper_endOneArgument_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.endOneArgument", bytes);
  }

  try {
    iface_->endOneArgument();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.endOneArgument");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.endOneArgument");
  }

  return;
}

void AstDumperProcessor::process_endArgumentList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.endArgumentList", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.endArgumentList");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.endArgumentList");
  }

  AstDumper_endArgumentList_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.endArgumentList", bytes);
  }

  try {
    iface_->endArgumentList();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.endArgumentList");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.endArgumentList");
  }

  return;
}

void AstDumperProcessor::process_endCallExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.endCallExpression", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.endCallExpression");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.endCallExpression");
  }

  AstDumper_endCallExpression_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.endCallExpression", bytes);
  }

  try {
    iface_->endCallExpression();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.endCallExpression");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.endCallExpression");
  }

  return;
}

void AstDumperProcessor::process_startBinaryExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.startBinaryExpression", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.startBinaryExpression");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.startBinaryExpression");
  }

  AstDumper_startBinaryExpression_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.startBinaryExpression", bytes);
  }

  try {
    iface_->startBinaryExpression(args.op);
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.startBinaryExpression");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.startBinaryExpression");
  }

  return;
}

void AstDumperProcessor::process_endBinaryExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.endBinaryExpression", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.endBinaryExpression");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.endBinaryExpression");
  }

  AstDumper_endBinaryExpression_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.endBinaryExpression", bytes);
  }

  try {
    iface_->endBinaryExpression();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.endBinaryExpression");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.endBinaryExpression");
  }

  return;
}

void AstDumperProcessor::process_startInstanceOfExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.startInstanceOfExpression", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.startInstanceOfExpression");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.startInstanceOfExpression");
  }

  AstDumper_startInstanceOfExpression_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.startInstanceOfExpression", bytes);
  }

  try {
    iface_->startInstanceOfExpression();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.startInstanceOfExpression");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.startInstanceOfExpression");
  }

  return;
}

void AstDumperProcessor::process_endInstanceOfExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.endInstanceOfExpression", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.endInstanceOfExpression");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.endInstanceOfExpression");
  }

  AstDumper_endInstanceOfExpression_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.endInstanceOfExpression", bytes);
  }

  try {
    iface_->endInstanceOfExpression();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.endInstanceOfExpression");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.endInstanceOfExpression");
  }

  return;
}

void AstDumperProcessor::process_startIsOperator(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.startIsOperator", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.startIsOperator");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.startIsOperator");
  }

  AstDumper_startIsOperator_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.startIsOperator", bytes);
  }

  try {
    iface_->startIsOperator();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.startIsOperator");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.startIsOperator");
  }

  return;
}

void AstDumperProcessor::process_endIsOperator(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.endIsOperator", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.endIsOperator");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.endIsOperator");
  }

  AstDumper_endIsOperator_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.endIsOperator", bytes);
  }

  try {
    iface_->endIsOperator();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.endIsOperator");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.endIsOperator");
  }

  return;
}

void AstDumperProcessor::process_startUnaryExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.startUnaryExpression", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.startUnaryExpression");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.startUnaryExpression");
  }

  AstDumper_startUnaryExpression_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.startUnaryExpression", bytes);
  }

  try {
    iface_->startUnaryExpression(args.op);
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.startUnaryExpression");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.startUnaryExpression");
  }

  return;
}

void AstDumperProcessor::process_endUnaryExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.endUnaryExpression", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.endUnaryExpression");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.endUnaryExpression");
  }

  AstDumper_endUnaryExpression_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.endUnaryExpression", bytes);
  }

  try {
    iface_->endUnaryExpression();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.endUnaryExpression");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.endUnaryExpression");
  }

  return;
}

void AstDumperProcessor::process_startVariableDeclare(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.startVariableDeclare", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.startVariableDeclare");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.startVariableDeclare");
  }

  AstDumper_startVariableDeclare_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.startVariableDeclare", bytes);
  }

  try {
    iface_->startVariableDeclare(args.var_decl);
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.startVariableDeclare");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.startVariableDeclare");
  }

  return;
}

void AstDumperProcessor::process_endVariableDeclare(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.endVariableDeclare", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.endVariableDeclare");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.endVariableDeclare");
  }

  AstDumper_endVariableDeclare_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.endVariableDeclare", bytes);
  }

  try {
    iface_->endVariableDeclare();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.endVariableDeclare");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.endVariableDeclare");
  }

  return;
}

void AstDumperProcessor::process_startAssignment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.startAssignment", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.startAssignment");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.startAssignment");
  }

  AstDumper_startAssignment_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.startAssignment", bytes);
  }

  try {
    iface_->startAssignment();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.startAssignment");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.startAssignment");
  }

  return;
}

void AstDumperProcessor::process_endAssignment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.endAssignment", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.endAssignment");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.endAssignment");
  }

  AstDumper_endAssignment_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.endAssignment", bytes);
  }

  try {
    iface_->endAssignment();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.endAssignment");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.endAssignment");
  }

  return;
}

void AstDumperProcessor::process_identifierExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.identifierExpression", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.identifierExpression");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.identifierExpression");
  }

  AstDumper_identifierExpression_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.identifierExpression", bytes);
  }

  try {
    iface_->identifierExpression(args.id);
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.identifierExpression");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.identifierExpression");
  }

  return;
}

void AstDumperProcessor::process_literalStringExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.literalStringExpression", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.literalStringExpression");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.literalStringExpression");
  }

  AstDumper_literalStringExpression_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.literalStringExpression", bytes);
  }

  try {
    iface_->literalStringExpression(args.str);
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.literalStringExpression");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.literalStringExpression");
  }

  return;
}

void AstDumperProcessor::process_literalNumberExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.literalNumberExpression", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.literalNumberExpression");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.literalNumberExpression");
  }

  AstDumper_literalNumberExpression_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.literalNumberExpression", bytes);
  }

  try {
    iface_->literalNumberExpression(args.str);
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.literalNumberExpression");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.literalNumberExpression");
  }

  return;
}

void AstDumperProcessor::process_literalBooleanExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.literalBooleanExpression", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.literalBooleanExpression");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.literalBooleanExpression");
  }

  AstDumper_literalBooleanExpression_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.literalBooleanExpression", bytes);
  }

  try {
    iface_->literalBooleanExpression(args.str);
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.literalBooleanExpression");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.literalBooleanExpression");
  }

  return;
}

void AstDumperProcessor::process_literalNull(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.literalNull", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.literalNull");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.literalNull");
  }

  AstDumper_literalNull_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.literalNull", bytes);
  }

  try {
    iface_->literalNull();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.literalNull");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.literalNull");
  }

  return;
}

void AstDumperProcessor::process_endExpressionList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.endExpressionList", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.endExpressionList");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.endExpressionList");
  }

  AstDumper_endExpressionList_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.endExpressionList", bytes);
  }

  try {
    iface_->endExpressionList();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.endExpressionList");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.endExpressionList");
  }

  return;
}

void AstDumperProcessor::process_addImport(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.addImport", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.addImport");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.addImport");
  }

  AstDumper_addImport_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.addImport", bytes);
  }

  try {
    iface_->addImport(args.packages);
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.addImport");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.addImport");
  }

  return;
}

void AstDumperProcessor::process_startStmtList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.startStmtList", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.startStmtList");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.startStmtList");
  }

  AstDumper_startStmtList_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.startStmtList", bytes);
  }

  try {
    iface_->startStmtList();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.startStmtList");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.startStmtList");
  }

  return;
}

void AstDumperProcessor::process_endStmtList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.endStmtList", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.endStmtList");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.endStmtList");
  }

  AstDumper_endStmtList_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.endStmtList", bytes);
  }

  try {
    iface_->endStmtList();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.endStmtList");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.endStmtList");
  }

  return;
}

void AstDumperProcessor::process_startScope(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.startScope", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.startScope");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.startScope");
  }

  AstDumper_startScope_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.startScope", bytes);
  }

  try {
    iface_->startScope();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.startScope");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.startScope");
  }

  return;
}

void AstDumperProcessor::process_endScope(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.endScope", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.endScope");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.endScope");
  }

  AstDumper_endScope_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.endScope", bytes);
  }

  try {
    iface_->endScope();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.endScope");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.endScope");
  }

  return;
}

void AstDumperProcessor::process_startClassDefinition(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.startClassDefinition", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.startClassDefinition");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.startClassDefinition");
  }

  AstDumper_startClassDefinition_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.startClassDefinition", bytes);
  }

  try {
    iface_->startClassDefinition(args.class_define);
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.startClassDefinition");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.startClassDefinition");
  }

  return;
}

void AstDumperProcessor::process_startClassStmt(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.startClassStmt", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.startClassStmt");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.startClassStmt");
  }

  AstDumper_startClassStmt_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.startClassStmt", bytes);
  }

  try {
    iface_->startClassStmt();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.startClassStmt");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.startClassStmt");
  }

  return;
}

void AstDumperProcessor::process_endClassStmt(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.endClassStmt", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.endClassStmt");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.endClassStmt");
  }

  AstDumper_endClassStmt_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.endClassStmt", bytes);
  }

  try {
    iface_->endClassStmt();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.endClassStmt");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.endClassStmt");
  }

  return;
}

void AstDumperProcessor::process_endClassDefinition(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.endClassDefinition", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.endClassDefinition");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.endClassDefinition");
  }

  AstDumper_endClassDefinition_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.endClassDefinition", bytes);
  }

  try {
    iface_->endClassDefinition();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.endClassDefinition");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.endClassDefinition");
  }

  return;
}

void AstDumperProcessor::process_startMemberExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.startMemberExpression", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.startMemberExpression");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.startMemberExpression");
  }

  AstDumper_startMemberExpression_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.startMemberExpression", bytes);
  }

  try {
    iface_->startMemberExpression();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.startMemberExpression");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.startMemberExpression");
  }

  return;
}

void AstDumperProcessor::process_endMemberExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.endMemberExpression", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.endMemberExpression");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.endMemberExpression");
  }

  AstDumper_endMemberExpression_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.endMemberExpression", bytes);
  }

  try {
    iface_->endMemberExpression();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.endMemberExpression");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.endMemberExpression");
  }

  return;
}

void AstDumperProcessor::process_startForStatement(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.startForStatement", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.startForStatement");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.startForStatement");
  }

  AstDumper_startForStatement_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.startForStatement", bytes);
  }

  try {
    iface_->startForStatement();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.startForStatement");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.startForStatement");
  }

  return;
}

void AstDumperProcessor::process_startForInit(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.startForInit", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.startForInit");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.startForInit");
  }

  AstDumper_startForInit_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.startForInit", bytes);
  }

  try {
    iface_->startForInit();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.startForInit");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.startForInit");
  }

  return;
}

void AstDumperProcessor::process_endForInit(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.endForInit", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.endForInit");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.endForInit");
  }

  AstDumper_endForInit_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.endForInit", bytes);
  }

  try {
    iface_->endForInit();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.endForInit");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.endForInit");
  }

  return;
}

void AstDumperProcessor::process_startForStep(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.startForStep", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.startForStep");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.startForStep");
  }

  AstDumper_startForStep_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.startForStep", bytes);
  }

  try {
    iface_->startForStep();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.startForStep");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.startForStep");
  }

  return;
}

void AstDumperProcessor::process_endForStep(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.endForStep", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.endForStep");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.endForStep");
  }

  AstDumper_endForStep_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.endForStep", bytes);
  }

  try {
    iface_->endForStep();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.endForStep");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.endForStep");
  }

  return;
}

void AstDumperProcessor::process_endForStatement(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.endForStatement", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.endForStatement");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.endForStatement");
  }

  AstDumper_endForStatement_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.endForStatement", bytes);
  }

  try {
    iface_->endForStatement();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.endForStatement");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.endForStatement");
  }

  return;
}

void AstDumperProcessor::process_startDoStatement(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.startDoStatement", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.startDoStatement");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.startDoStatement");
  }

  AstDumper_startDoStatement_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.startDoStatement", bytes);
  }

  try {
    iface_->startDoStatement();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.startDoStatement");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.startDoStatement");
  }

  return;
}

void AstDumperProcessor::process_endDoStatement(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.endDoStatement", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.endDoStatement");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.endDoStatement");
  }

  AstDumper_endDoStatement_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.endDoStatement", bytes);
  }

  try {
    iface_->endDoStatement();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.endDoStatement");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.endDoStatement");
  }

  return;
}

void AstDumperProcessor::process_startWhileStatement(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.startWhileStatement", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.startWhileStatement");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.startWhileStatement");
  }

  AstDumper_startWhileStatement_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.startWhileStatement", bytes);
  }

  try {
    iface_->startWhileStatement();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.startWhileStatement");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.startWhileStatement");
  }

  return;
}

void AstDumperProcessor::process_endWhileStatement(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.endWhileStatement", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.endWhileStatement");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.endWhileStatement");
  }

  AstDumper_endWhileStatement_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.endWhileStatement", bytes);
  }

  try {
    iface_->endWhileStatement();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.endWhileStatement");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.endWhileStatement");
  }

  return;
}

void AstDumperProcessor::process_defineMetaData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.defineMetaData", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.defineMetaData");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.defineMetaData");
  }

  AstDumper_defineMetaData_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.defineMetaData", bytes);
  }

  try {
    iface_->defineMetaData(args.metadata);
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.defineMetaData");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.defineMetaData");
  }

  return;
}

}}} // namespace

