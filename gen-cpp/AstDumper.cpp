/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#include "AstDumper.h"

namespace tw { namespace maple { namespace generated {

uint32_t AstDumper_startProgram_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_startProgram_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startProgram_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startProgram_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startProgram_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endProgram_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_endProgram_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endProgram_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endProgram_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endProgram_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startPackage_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->id.clear();
            uint32_t _size13;
            ::apache::thrift::protocol::TType _etype16;
            iprot->readListBegin(_etype16, _size13);
            this->id.resize(_size13);
            uint32_t _i17;
            for (_i17 = 0; _i17 < _size13; ++_i17)
            {
              xfer += iprot->readString(this->id[_i17]);
            }
            iprot->readListEnd();
          }
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_startPackage_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startPackage_args");
  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, this->id.size());
    std::vector<std::string> ::const_iterator _iter18;
    for (_iter18 = this->id.begin(); _iter18 != this->id.end(); ++_iter18)
    {
      xfer += oprot->writeString((*_iter18));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startPackage_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startPackage_pargs");
  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, (*(this->id)).size());
    std::vector<std::string> ::const_iterator _iter19;
    for (_iter19 = (*(this->id)).begin(); _iter19 != (*(this->id)).end(); ++_iter19)
    {
      xfer += oprot->writeString((*_iter19));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endPackage_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->IDs.clear();
            uint32_t _size20;
            ::apache::thrift::protocol::TType _etype23;
            iprot->readListBegin(_etype23, _size20);
            this->IDs.resize(_size20);
            uint32_t _i24;
            for (_i24 = 0; _i24 < _size20; ++_i24)
            {
              xfer += iprot->readString(this->IDs[_i24]);
            }
            iprot->readListEnd();
          }
          this->__isset.IDs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_endPackage_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endPackage_args");
  xfer += oprot->writeFieldBegin("IDs", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, this->IDs.size());
    std::vector<std::string> ::const_iterator _iter25;
    for (_iter25 = this->IDs.begin(); _iter25 != this->IDs.end(); ++_iter25)
    {
      xfer += oprot->writeString((*_iter25));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endPackage_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endPackage_pargs");
  xfer += oprot->writeFieldBegin("IDs", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, (*(this->IDs)).size());
    std::vector<std::string> ::const_iterator _iter26;
    for (_iter26 = (*(this->IDs)).begin(); _iter26 != (*(this->IDs)).end(); ++_iter26)
    {
      xfer += oprot->writeString((*_iter26));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startFunctionDefinition_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_startFunctionDefinition_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startFunctionDefinition_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startFunctionDefinition_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startFunctionDefinition_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_functionAttribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->attrs.clear();
            uint32_t _size27;
            ::apache::thrift::protocol::TType _etype30;
            iprot->readListBegin(_etype30, _size27);
            this->attrs.resize(_size27);
            uint32_t _i31;
            for (_i31 = 0; _i31 < _size27; ++_i31)
            {
              xfer += iprot->readString(this->attrs[_i31]);
            }
            iprot->readListEnd();
          }
          this->__isset.attrs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_functionAttribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_functionAttribute_args");
  xfer += oprot->writeFieldBegin("attrs", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, this->attrs.size());
    std::vector<std::string> ::const_iterator _iter32;
    for (_iter32 = this->attrs.begin(); _iter32 != this->attrs.end(); ++_iter32)
    {
      xfer += oprot->writeString((*_iter32));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_functionAttribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_functionAttribute_pargs");
  xfer += oprot->writeFieldBegin("attrs", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, (*(this->attrs)).size());
    std::vector<std::string> ::const_iterator _iter33;
    for (_iter33 = (*(this->attrs)).begin(); _iter33 != (*(this->attrs)).end(); ++_iter33)
    {
      xfer += oprot->writeString((*_iter33));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_functionName_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_functionName_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_functionName_args");
  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_functionName_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_functionName_pargs");
  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString((*(this->name)));
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startFunctionCommon_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_startFunctionCommon_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startFunctionCommon_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startFunctionCommon_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startFunctionCommon_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startFunctionSignature_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_startFunctionSignature_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startFunctionSignature_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startFunctionSignature_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startFunctionSignature_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startFunctionSignatureParameters_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_startFunctionSignatureParameters_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startFunctionSignatureParameters_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startFunctionSignatureParameters_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startFunctionSignatureParameters_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startFunctionSignatureParameterMember_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_startFunctionSignatureParameterMember_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startFunctionSignatureParameterMember_args");
  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->type);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startFunctionSignatureParameterMember_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startFunctionSignatureParameterMember_pargs");
  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString((*(this->name)));
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString((*(this->type)));
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endFunctionSignatureParameterMember_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_endFunctionSignatureParameterMember_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endFunctionSignatureParameterMember_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endFunctionSignatureParameterMember_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endFunctionSignatureParameterMember_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endFunctionSignatureParameters_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_endFunctionSignatureParameters_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endFunctionSignatureParameters_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endFunctionSignatureParameters_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endFunctionSignatureParameters_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startFunctionSignatureReturnType_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_startFunctionSignatureReturnType_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startFunctionSignatureReturnType_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startFunctionSignatureReturnType_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startFunctionSignatureReturnType_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endFunctionSignatureReturnType_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_endFunctionSignatureReturnType_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endFunctionSignatureReturnType_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endFunctionSignatureReturnType_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endFunctionSignatureReturnType_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endFunctionSignature_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_endFunctionSignature_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endFunctionSignature_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endFunctionSignature_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endFunctionSignature_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endFunctionCommon_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_endFunctionCommon_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endFunctionCommon_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endFunctionCommon_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endFunctionCommon_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endFunctionDefinition_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_endFunctionDefinition_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endFunctionDefinition_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endFunctionDefinition_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endFunctionDefinition_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startReturnStatement_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_startReturnStatement_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startReturnStatement_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startReturnStatement_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startReturnStatement_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endReturnStatement_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_endReturnStatement_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endReturnStatement_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endReturnStatement_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endReturnStatement_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startIfStatement_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_startIfStatement_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startIfStatement_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startIfStatement_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startIfStatement_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startIfStatement_Condition_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_startIfStatement_Condition_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startIfStatement_Condition_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startIfStatement_Condition_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startIfStatement_Condition_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endIfStatement_Condition_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_endIfStatement_Condition_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endIfStatement_Condition_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endIfStatement_Condition_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endIfStatement_Condition_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startIfStatement_Then_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_startIfStatement_Then_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startIfStatement_Then_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startIfStatement_Then_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startIfStatement_Then_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endIfStatement_Then_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_endIfStatement_Then_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endIfStatement_Then_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endIfStatement_Then_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endIfStatement_Then_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startIfStatement_Else_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_startIfStatement_Else_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startIfStatement_Else_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startIfStatement_Else_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startIfStatement_Else_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endtIfStatement_Else_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_endtIfStatement_Else_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endtIfStatement_Else_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endtIfStatement_Else_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endtIfStatement_Else_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endIfStatement_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_endIfStatement_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endIfStatement_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endIfStatement_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endIfStatement_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startStmtExpression_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_startStmtExpression_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startStmtExpression_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startStmtExpression_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startStmtExpression_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endStmtExpression_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_endStmtExpression_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endStmtExpression_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endStmtExpression_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endStmtExpression_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startExpressionList_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_startExpressionList_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startExpressionList_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startExpressionList_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startExpressionList_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startCallExpression_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->call.read(iprot);
          this->__isset.call = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_startCallExpression_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startCallExpression_args");
  xfer += oprot->writeFieldBegin("call", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->call.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startCallExpression_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startCallExpression_pargs");
  xfer += oprot->writeFieldBegin("call", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->call)).write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startAgumentList_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_startAgumentList_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startAgumentList_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startAgumentList_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startAgumentList_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endAgumentList_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_endAgumentList_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endAgumentList_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endAgumentList_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endAgumentList_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endCallExpression_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_endCallExpression_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endCallExpression_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endCallExpression_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endCallExpression_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startBinaryExpression_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->op.read(iprot);
          this->__isset.op = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_startBinaryExpression_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startBinaryExpression_args");
  xfer += oprot->writeFieldBegin("op", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->op.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startBinaryExpression_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startBinaryExpression_pargs");
  xfer += oprot->writeFieldBegin("op", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->op)).write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endBinaryExpression_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_endBinaryExpression_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endBinaryExpression_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endBinaryExpression_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endBinaryExpression_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startInstanceOfExpression_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_startInstanceOfExpression_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startInstanceOfExpression_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startInstanceOfExpression_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startInstanceOfExpression_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endInstanceOfExpression_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_endInstanceOfExpression_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endInstanceOfExpression_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endInstanceOfExpression_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endInstanceOfExpression_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startIsOperator_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_startIsOperator_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startIsOperator_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startIsOperator_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startIsOperator_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endIsOperator_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_endIsOperator_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endIsOperator_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endIsOperator_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endIsOperator_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startUnaryExpression_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->op.read(iprot);
          this->__isset.op = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_startUnaryExpression_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startUnaryExpression_args");
  xfer += oprot->writeFieldBegin("op", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->op.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startUnaryExpression_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startUnaryExpression_pargs");
  xfer += oprot->writeFieldBegin("op", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->op)).write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endUnaryExpression_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_endUnaryExpression_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endUnaryExpression_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endUnaryExpression_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endUnaryExpression_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startVariableDeclare_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_startVariableDeclare_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startVariableDeclare_args");
  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->type);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startVariableDeclare_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startVariableDeclare_pargs");
  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString((*(this->name)));
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString((*(this->type)));
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endVariableDeclare_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_endVariableDeclare_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endVariableDeclare_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endVariableDeclare_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endVariableDeclare_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startAssignment_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_startAssignment_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startAssignment_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startAssignment_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startAssignment_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endAssignment_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_endAssignment_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endAssignment_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endAssignment_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endAssignment_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_identifierExpression_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->id.read(iprot);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_identifierExpression_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_identifierExpression_args");
  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->id.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_identifierExpression_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_identifierExpression_pargs");
  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->id)).write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_literalStringExpression_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->str.read(iprot);
          this->__isset.str = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_literalStringExpression_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_literalStringExpression_args");
  xfer += oprot->writeFieldBegin("str", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->str.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_literalStringExpression_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_literalStringExpression_pargs");
  xfer += oprot->writeFieldBegin("str", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->str)).write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_literalNumberExpression_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->str.read(iprot);
          this->__isset.str = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_literalNumberExpression_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_literalNumberExpression_args");
  xfer += oprot->writeFieldBegin("str", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->str.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_literalNumberExpression_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_literalNumberExpression_pargs");
  xfer += oprot->writeFieldBegin("str", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->str)).write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_literalBooleanExpression_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->str.read(iprot);
          this->__isset.str = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_literalBooleanExpression_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_literalBooleanExpression_args");
  xfer += oprot->writeFieldBegin("str", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->str.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_literalBooleanExpression_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_literalBooleanExpression_pargs");
  xfer += oprot->writeFieldBegin("str", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->str)).write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endExpressionList_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_endExpressionList_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endExpressionList_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endExpressionList_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endExpressionList_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_addImport_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->packages.clear();
            uint32_t _size34;
            ::apache::thrift::protocol::TType _etype37;
            iprot->readListBegin(_etype37, _size34);
            this->packages.resize(_size34);
            uint32_t _i38;
            for (_i38 = 0; _i38 < _size34; ++_i38)
            {
              xfer += iprot->readString(this->packages[_i38]);
            }
            iprot->readListEnd();
          }
          this->__isset.packages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_addImport_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_addImport_args");
  xfer += oprot->writeFieldBegin("packages", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, this->packages.size());
    std::vector<std::string> ::const_iterator _iter39;
    for (_iter39 = this->packages.begin(); _iter39 != this->packages.end(); ++_iter39)
    {
      xfer += oprot->writeString((*_iter39));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_addImport_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_addImport_pargs");
  xfer += oprot->writeFieldBegin("packages", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, (*(this->packages)).size());
    std::vector<std::string> ::const_iterator _iter40;
    for (_iter40 = (*(this->packages)).begin(); _iter40 != (*(this->packages)).end(); ++_iter40)
    {
      xfer += oprot->writeString((*_iter40));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startStmtList_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_startStmtList_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startStmtList_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startStmtList_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startStmtList_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endStmtList_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_endStmtList_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endStmtList_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endStmtList_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endStmtList_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startClassDefine_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->class_define.read(iprot);
          this->__isset.class_define = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_startClassDefine_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startClassDefine_args");
  xfer += oprot->writeFieldBegin("class_define", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->class_define.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startClassDefine_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startClassDefine_pargs");
  xfer += oprot->writeFieldBegin("class_define", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->class_define)).write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startClassStmt_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_startClassStmt_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startClassStmt_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startClassStmt_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startClassStmt_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endClassStmt_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_endClassStmt_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endClassStmt_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endClassStmt_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endClassStmt_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endClassDefine_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_endClassDefine_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endClassDefine_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endClassDefine_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endClassDefine_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startAttributeList_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_startAttributeList_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startAttributeList_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_startAttributeList_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_startAttributeList_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endAttributelist_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstDumper_endAttributelist_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endAttributelist_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t AstDumper_endAttributelist_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AstDumper_endAttributelist_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void AstDumperClient::startProgram()
{
  send_startProgram();
}

void AstDumperClient::send_startProgram()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startProgram", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_startProgram_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::endProgram()
{
  send_endProgram();
}

void AstDumperClient::send_endProgram()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("endProgram", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_endProgram_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::startPackage(const StringList& id)
{
  send_startPackage(id);
}

void AstDumperClient::send_startPackage(const StringList& id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startPackage", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_startPackage_pargs args;
  args.id = &id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::endPackage(const StringList& IDs)
{
  send_endPackage(IDs);
}

void AstDumperClient::send_endPackage(const StringList& IDs)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("endPackage", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_endPackage_pargs args;
  args.IDs = &IDs;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::startFunctionDefinition()
{
  send_startFunctionDefinition();
}

void AstDumperClient::send_startFunctionDefinition()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startFunctionDefinition", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_startFunctionDefinition_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::functionAttribute(const StringList& attrs)
{
  send_functionAttribute(attrs);
}

void AstDumperClient::send_functionAttribute(const StringList& attrs)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("functionAttribute", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_functionAttribute_pargs args;
  args.attrs = &attrs;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::functionName(const std::string& name)
{
  send_functionName(name);
}

void AstDumperClient::send_functionName(const std::string& name)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("functionName", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_functionName_pargs args;
  args.name = &name;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::startFunctionCommon()
{
  send_startFunctionCommon();
}

void AstDumperClient::send_startFunctionCommon()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startFunctionCommon", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_startFunctionCommon_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::startFunctionSignature()
{
  send_startFunctionSignature();
}

void AstDumperClient::send_startFunctionSignature()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startFunctionSignature", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_startFunctionSignature_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::startFunctionSignatureParameters()
{
  send_startFunctionSignatureParameters();
}

void AstDumperClient::send_startFunctionSignatureParameters()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startFunctionSignatureParameters", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_startFunctionSignatureParameters_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::startFunctionSignatureParameterMember(const std::string& name, const std::string& type)
{
  send_startFunctionSignatureParameterMember(name, type);
}

void AstDumperClient::send_startFunctionSignatureParameterMember(const std::string& name, const std::string& type)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startFunctionSignatureParameterMember", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_startFunctionSignatureParameterMember_pargs args;
  args.name = &name;
  args.type = &type;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::endFunctionSignatureParameterMember()
{
  send_endFunctionSignatureParameterMember();
}

void AstDumperClient::send_endFunctionSignatureParameterMember()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("endFunctionSignatureParameterMember", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_endFunctionSignatureParameterMember_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::endFunctionSignatureParameters()
{
  send_endFunctionSignatureParameters();
}

void AstDumperClient::send_endFunctionSignatureParameters()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("endFunctionSignatureParameters", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_endFunctionSignatureParameters_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::startFunctionSignatureReturnType()
{
  send_startFunctionSignatureReturnType();
}

void AstDumperClient::send_startFunctionSignatureReturnType()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startFunctionSignatureReturnType", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_startFunctionSignatureReturnType_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::endFunctionSignatureReturnType()
{
  send_endFunctionSignatureReturnType();
}

void AstDumperClient::send_endFunctionSignatureReturnType()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("endFunctionSignatureReturnType", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_endFunctionSignatureReturnType_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::endFunctionSignature()
{
  send_endFunctionSignature();
}

void AstDumperClient::send_endFunctionSignature()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("endFunctionSignature", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_endFunctionSignature_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::endFunctionCommon()
{
  send_endFunctionCommon();
}

void AstDumperClient::send_endFunctionCommon()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("endFunctionCommon", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_endFunctionCommon_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::endFunctionDefinition()
{
  send_endFunctionDefinition();
}

void AstDumperClient::send_endFunctionDefinition()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("endFunctionDefinition", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_endFunctionDefinition_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::startReturnStatement()
{
  send_startReturnStatement();
}

void AstDumperClient::send_startReturnStatement()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startReturnStatement", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_startReturnStatement_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::endReturnStatement()
{
  send_endReturnStatement();
}

void AstDumperClient::send_endReturnStatement()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("endReturnStatement", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_endReturnStatement_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::startIfStatement()
{
  send_startIfStatement();
}

void AstDumperClient::send_startIfStatement()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startIfStatement", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_startIfStatement_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::startIfStatement_Condition()
{
  send_startIfStatement_Condition();
}

void AstDumperClient::send_startIfStatement_Condition()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startIfStatement_Condition", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_startIfStatement_Condition_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::endIfStatement_Condition()
{
  send_endIfStatement_Condition();
}

void AstDumperClient::send_endIfStatement_Condition()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("endIfStatement_Condition", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_endIfStatement_Condition_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::startIfStatement_Then()
{
  send_startIfStatement_Then();
}

void AstDumperClient::send_startIfStatement_Then()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startIfStatement_Then", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_startIfStatement_Then_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::endIfStatement_Then()
{
  send_endIfStatement_Then();
}

void AstDumperClient::send_endIfStatement_Then()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("endIfStatement_Then", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_endIfStatement_Then_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::startIfStatement_Else()
{
  send_startIfStatement_Else();
}

void AstDumperClient::send_startIfStatement_Else()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startIfStatement_Else", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_startIfStatement_Else_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::endtIfStatement_Else()
{
  send_endtIfStatement_Else();
}

void AstDumperClient::send_endtIfStatement_Else()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("endtIfStatement_Else", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_endtIfStatement_Else_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::endIfStatement()
{
  send_endIfStatement();
}

void AstDumperClient::send_endIfStatement()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("endIfStatement", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_endIfStatement_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::startStmtExpression()
{
  send_startStmtExpression();
}

void AstDumperClient::send_startStmtExpression()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startStmtExpression", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_startStmtExpression_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::endStmtExpression()
{
  send_endStmtExpression();
}

void AstDumperClient::send_endStmtExpression()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("endStmtExpression", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_endStmtExpression_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::startExpressionList()
{
  send_startExpressionList();
}

void AstDumperClient::send_startExpressionList()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startExpressionList", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_startExpressionList_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::startCallExpression(const CallExpression& call)
{
  send_startCallExpression(call);
}

void AstDumperClient::send_startCallExpression(const CallExpression& call)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startCallExpression", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_startCallExpression_pargs args;
  args.call = &call;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::startAgumentList()
{
  send_startAgumentList();
}

void AstDumperClient::send_startAgumentList()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startAgumentList", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_startAgumentList_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::endAgumentList()
{
  send_endAgumentList();
}

void AstDumperClient::send_endAgumentList()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("endAgumentList", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_endAgumentList_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::endCallExpression()
{
  send_endCallExpression();
}

void AstDumperClient::send_endCallExpression()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("endCallExpression", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_endCallExpression_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::startBinaryExpression(const BinaryExpression& op)
{
  send_startBinaryExpression(op);
}

void AstDumperClient::send_startBinaryExpression(const BinaryExpression& op)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startBinaryExpression", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_startBinaryExpression_pargs args;
  args.op = &op;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::endBinaryExpression()
{
  send_endBinaryExpression();
}

void AstDumperClient::send_endBinaryExpression()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("endBinaryExpression", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_endBinaryExpression_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::startInstanceOfExpression()
{
  send_startInstanceOfExpression();
}

void AstDumperClient::send_startInstanceOfExpression()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startInstanceOfExpression", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_startInstanceOfExpression_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::endInstanceOfExpression()
{
  send_endInstanceOfExpression();
}

void AstDumperClient::send_endInstanceOfExpression()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("endInstanceOfExpression", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_endInstanceOfExpression_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::startIsOperator()
{
  send_startIsOperator();
}

void AstDumperClient::send_startIsOperator()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startIsOperator", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_startIsOperator_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::endIsOperator()
{
  send_endIsOperator();
}

void AstDumperClient::send_endIsOperator()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("endIsOperator", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_endIsOperator_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::startUnaryExpression(const UnaryExpression& op)
{
  send_startUnaryExpression(op);
}

void AstDumperClient::send_startUnaryExpression(const UnaryExpression& op)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startUnaryExpression", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_startUnaryExpression_pargs args;
  args.op = &op;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::endUnaryExpression()
{
  send_endUnaryExpression();
}

void AstDumperClient::send_endUnaryExpression()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("endUnaryExpression", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_endUnaryExpression_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::startVariableDeclare(const std::string& name, const std::string& type)
{
  send_startVariableDeclare(name, type);
}

void AstDumperClient::send_startVariableDeclare(const std::string& name, const std::string& type)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startVariableDeclare", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_startVariableDeclare_pargs args;
  args.name = &name;
  args.type = &type;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::endVariableDeclare()
{
  send_endVariableDeclare();
}

void AstDumperClient::send_endVariableDeclare()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("endVariableDeclare", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_endVariableDeclare_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::startAssignment()
{
  send_startAssignment();
}

void AstDumperClient::send_startAssignment()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startAssignment", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_startAssignment_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::endAssignment()
{
  send_endAssignment();
}

void AstDumperClient::send_endAssignment()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("endAssignment", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_endAssignment_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::identifierExpression(const Identifier& id)
{
  send_identifierExpression(id);
}

void AstDumperClient::send_identifierExpression(const Identifier& id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("identifierExpression", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_identifierExpression_pargs args;
  args.id = &id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::literalStringExpression(const Literal& str)
{
  send_literalStringExpression(str);
}

void AstDumperClient::send_literalStringExpression(const Literal& str)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("literalStringExpression", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_literalStringExpression_pargs args;
  args.str = &str;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::literalNumberExpression(const Literal& str)
{
  send_literalNumberExpression(str);
}

void AstDumperClient::send_literalNumberExpression(const Literal& str)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("literalNumberExpression", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_literalNumberExpression_pargs args;
  args.str = &str;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::literalBooleanExpression(const Literal& str)
{
  send_literalBooleanExpression(str);
}

void AstDumperClient::send_literalBooleanExpression(const Literal& str)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("literalBooleanExpression", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_literalBooleanExpression_pargs args;
  args.str = &str;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::endExpressionList()
{
  send_endExpressionList();
}

void AstDumperClient::send_endExpressionList()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("endExpressionList", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_endExpressionList_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::addImport(const StringList& packages)
{
  send_addImport(packages);
}

void AstDumperClient::send_addImport(const StringList& packages)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("addImport", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_addImport_pargs args;
  args.packages = &packages;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::startStmtList()
{
  send_startStmtList();
}

void AstDumperClient::send_startStmtList()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startStmtList", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_startStmtList_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::endStmtList()
{
  send_endStmtList();
}

void AstDumperClient::send_endStmtList()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("endStmtList", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_endStmtList_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::startClassDefine(const ClassDefine& class_define)
{
  send_startClassDefine(class_define);
}

void AstDumperClient::send_startClassDefine(const ClassDefine& class_define)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startClassDefine", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_startClassDefine_pargs args;
  args.class_define = &class_define;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::startClassStmt()
{
  send_startClassStmt();
}

void AstDumperClient::send_startClassStmt()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startClassStmt", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_startClassStmt_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::endClassStmt()
{
  send_endClassStmt();
}

void AstDumperClient::send_endClassStmt()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("endClassStmt", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_endClassStmt_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::endClassDefine()
{
  send_endClassDefine();
}

void AstDumperClient::send_endClassDefine()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("endClassDefine", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_endClassDefine_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::startAttributeList()
{
  send_startAttributeList();
}

void AstDumperClient::send_startAttributeList()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startAttributeList", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_startAttributeList_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AstDumperClient::endAttributelist()
{
  send_endAttributelist();
}

void AstDumperClient::send_endAttributelist()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("endAttributelist", ::apache::thrift::protocol::T_CALL, cseqid);

  AstDumper_endAttributelist_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

bool AstDumperProcessor::process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot, void* callContext) {

  ::apache::thrift::protocol::TProtocol* iprot = piprot.get();
  ::apache::thrift::protocol::TProtocol* oprot = poprot.get();
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;
  int32_t seqid;

  iprot->readMessageBegin(fname, mtype, seqid);

  if (mtype != ::apache::thrift::protocol::T_CALL && mtype != ::apache::thrift::protocol::T_ONEWAY) {
    iprot->skip(::apache::thrift::protocol::T_STRUCT);
    iprot->readMessageEnd();
    iprot->getTransport()->readEnd();
    ::apache::thrift::TApplicationException x(::apache::thrift::TApplicationException::INVALID_MESSAGE_TYPE);
    oprot->writeMessageBegin(fname, ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return true;
  }

  return process_fn(iprot, oprot, fname, seqid, callContext);
}

bool AstDumperProcessor::process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext) {
  std::map<std::string, void (AstDumperProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*)>::iterator pfn;
  pfn = processMap_.find(fname);
  if (pfn == processMap_.end()) {
    iprot->skip(::apache::thrift::protocol::T_STRUCT);
    iprot->readMessageEnd();
    iprot->getTransport()->readEnd();
    ::apache::thrift::TApplicationException x(::apache::thrift::TApplicationException::UNKNOWN_METHOD, "Invalid method name: '"+fname+"'");
    oprot->writeMessageBegin(fname, ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return true;
  }
  (this->*(pfn->second))(seqid, iprot, oprot, callContext);
  return true;
}

void AstDumperProcessor::process_startProgram(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.startProgram", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.startProgram");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.startProgram");
  }

  AstDumper_startProgram_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.startProgram", bytes);
  }

  try {
    iface_->startProgram();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.startProgram");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.startProgram");
  }

  return;
}

void AstDumperProcessor::process_endProgram(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.endProgram", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.endProgram");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.endProgram");
  }

  AstDumper_endProgram_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.endProgram", bytes);
  }

  try {
    iface_->endProgram();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.endProgram");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.endProgram");
  }

  return;
}

void AstDumperProcessor::process_startPackage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.startPackage", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.startPackage");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.startPackage");
  }

  AstDumper_startPackage_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.startPackage", bytes);
  }

  try {
    iface_->startPackage(args.id);
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.startPackage");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.startPackage");
  }

  return;
}

void AstDumperProcessor::process_endPackage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.endPackage", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.endPackage");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.endPackage");
  }

  AstDumper_endPackage_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.endPackage", bytes);
  }

  try {
    iface_->endPackage(args.IDs);
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.endPackage");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.endPackage");
  }

  return;
}

void AstDumperProcessor::process_startFunctionDefinition(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.startFunctionDefinition", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.startFunctionDefinition");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.startFunctionDefinition");
  }

  AstDumper_startFunctionDefinition_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.startFunctionDefinition", bytes);
  }

  try {
    iface_->startFunctionDefinition();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.startFunctionDefinition");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.startFunctionDefinition");
  }

  return;
}

void AstDumperProcessor::process_functionAttribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.functionAttribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.functionAttribute");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.functionAttribute");
  }

  AstDumper_functionAttribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.functionAttribute", bytes);
  }

  try {
    iface_->functionAttribute(args.attrs);
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.functionAttribute");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.functionAttribute");
  }

  return;
}

void AstDumperProcessor::process_functionName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.functionName", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.functionName");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.functionName");
  }

  AstDumper_functionName_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.functionName", bytes);
  }

  try {
    iface_->functionName(args.name);
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.functionName");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.functionName");
  }

  return;
}

void AstDumperProcessor::process_startFunctionCommon(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.startFunctionCommon", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.startFunctionCommon");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.startFunctionCommon");
  }

  AstDumper_startFunctionCommon_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.startFunctionCommon", bytes);
  }

  try {
    iface_->startFunctionCommon();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.startFunctionCommon");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.startFunctionCommon");
  }

  return;
}

void AstDumperProcessor::process_startFunctionSignature(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.startFunctionSignature", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.startFunctionSignature");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.startFunctionSignature");
  }

  AstDumper_startFunctionSignature_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.startFunctionSignature", bytes);
  }

  try {
    iface_->startFunctionSignature();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.startFunctionSignature");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.startFunctionSignature");
  }

  return;
}

void AstDumperProcessor::process_startFunctionSignatureParameters(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.startFunctionSignatureParameters", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.startFunctionSignatureParameters");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.startFunctionSignatureParameters");
  }

  AstDumper_startFunctionSignatureParameters_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.startFunctionSignatureParameters", bytes);
  }

  try {
    iface_->startFunctionSignatureParameters();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.startFunctionSignatureParameters");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.startFunctionSignatureParameters");
  }

  return;
}

void AstDumperProcessor::process_startFunctionSignatureParameterMember(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.startFunctionSignatureParameterMember", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.startFunctionSignatureParameterMember");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.startFunctionSignatureParameterMember");
  }

  AstDumper_startFunctionSignatureParameterMember_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.startFunctionSignatureParameterMember", bytes);
  }

  try {
    iface_->startFunctionSignatureParameterMember(args.name, args.type);
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.startFunctionSignatureParameterMember");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.startFunctionSignatureParameterMember");
  }

  return;
}

void AstDumperProcessor::process_endFunctionSignatureParameterMember(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.endFunctionSignatureParameterMember", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.endFunctionSignatureParameterMember");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.endFunctionSignatureParameterMember");
  }

  AstDumper_endFunctionSignatureParameterMember_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.endFunctionSignatureParameterMember", bytes);
  }

  try {
    iface_->endFunctionSignatureParameterMember();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.endFunctionSignatureParameterMember");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.endFunctionSignatureParameterMember");
  }

  return;
}

void AstDumperProcessor::process_endFunctionSignatureParameters(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.endFunctionSignatureParameters", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.endFunctionSignatureParameters");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.endFunctionSignatureParameters");
  }

  AstDumper_endFunctionSignatureParameters_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.endFunctionSignatureParameters", bytes);
  }

  try {
    iface_->endFunctionSignatureParameters();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.endFunctionSignatureParameters");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.endFunctionSignatureParameters");
  }

  return;
}

void AstDumperProcessor::process_startFunctionSignatureReturnType(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.startFunctionSignatureReturnType", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.startFunctionSignatureReturnType");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.startFunctionSignatureReturnType");
  }

  AstDumper_startFunctionSignatureReturnType_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.startFunctionSignatureReturnType", bytes);
  }

  try {
    iface_->startFunctionSignatureReturnType();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.startFunctionSignatureReturnType");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.startFunctionSignatureReturnType");
  }

  return;
}

void AstDumperProcessor::process_endFunctionSignatureReturnType(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.endFunctionSignatureReturnType", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.endFunctionSignatureReturnType");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.endFunctionSignatureReturnType");
  }

  AstDumper_endFunctionSignatureReturnType_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.endFunctionSignatureReturnType", bytes);
  }

  try {
    iface_->endFunctionSignatureReturnType();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.endFunctionSignatureReturnType");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.endFunctionSignatureReturnType");
  }

  return;
}

void AstDumperProcessor::process_endFunctionSignature(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.endFunctionSignature", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.endFunctionSignature");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.endFunctionSignature");
  }

  AstDumper_endFunctionSignature_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.endFunctionSignature", bytes);
  }

  try {
    iface_->endFunctionSignature();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.endFunctionSignature");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.endFunctionSignature");
  }

  return;
}

void AstDumperProcessor::process_endFunctionCommon(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.endFunctionCommon", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.endFunctionCommon");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.endFunctionCommon");
  }

  AstDumper_endFunctionCommon_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.endFunctionCommon", bytes);
  }

  try {
    iface_->endFunctionCommon();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.endFunctionCommon");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.endFunctionCommon");
  }

  return;
}

void AstDumperProcessor::process_endFunctionDefinition(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.endFunctionDefinition", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.endFunctionDefinition");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.endFunctionDefinition");
  }

  AstDumper_endFunctionDefinition_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.endFunctionDefinition", bytes);
  }

  try {
    iface_->endFunctionDefinition();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.endFunctionDefinition");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.endFunctionDefinition");
  }

  return;
}

void AstDumperProcessor::process_startReturnStatement(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.startReturnStatement", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.startReturnStatement");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.startReturnStatement");
  }

  AstDumper_startReturnStatement_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.startReturnStatement", bytes);
  }

  try {
    iface_->startReturnStatement();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.startReturnStatement");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.startReturnStatement");
  }

  return;
}

void AstDumperProcessor::process_endReturnStatement(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.endReturnStatement", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.endReturnStatement");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.endReturnStatement");
  }

  AstDumper_endReturnStatement_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.endReturnStatement", bytes);
  }

  try {
    iface_->endReturnStatement();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.endReturnStatement");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.endReturnStatement");
  }

  return;
}

void AstDumperProcessor::process_startIfStatement(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.startIfStatement", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.startIfStatement");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.startIfStatement");
  }

  AstDumper_startIfStatement_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.startIfStatement", bytes);
  }

  try {
    iface_->startIfStatement();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.startIfStatement");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.startIfStatement");
  }

  return;
}

void AstDumperProcessor::process_startIfStatement_Condition(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.startIfStatement_Condition", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.startIfStatement_Condition");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.startIfStatement_Condition");
  }

  AstDumper_startIfStatement_Condition_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.startIfStatement_Condition", bytes);
  }

  try {
    iface_->startIfStatement_Condition();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.startIfStatement_Condition");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.startIfStatement_Condition");
  }

  return;
}

void AstDumperProcessor::process_endIfStatement_Condition(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.endIfStatement_Condition", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.endIfStatement_Condition");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.endIfStatement_Condition");
  }

  AstDumper_endIfStatement_Condition_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.endIfStatement_Condition", bytes);
  }

  try {
    iface_->endIfStatement_Condition();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.endIfStatement_Condition");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.endIfStatement_Condition");
  }

  return;
}

void AstDumperProcessor::process_startIfStatement_Then(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.startIfStatement_Then", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.startIfStatement_Then");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.startIfStatement_Then");
  }

  AstDumper_startIfStatement_Then_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.startIfStatement_Then", bytes);
  }

  try {
    iface_->startIfStatement_Then();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.startIfStatement_Then");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.startIfStatement_Then");
  }

  return;
}

void AstDumperProcessor::process_endIfStatement_Then(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.endIfStatement_Then", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.endIfStatement_Then");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.endIfStatement_Then");
  }

  AstDumper_endIfStatement_Then_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.endIfStatement_Then", bytes);
  }

  try {
    iface_->endIfStatement_Then();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.endIfStatement_Then");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.endIfStatement_Then");
  }

  return;
}

void AstDumperProcessor::process_startIfStatement_Else(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.startIfStatement_Else", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.startIfStatement_Else");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.startIfStatement_Else");
  }

  AstDumper_startIfStatement_Else_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.startIfStatement_Else", bytes);
  }

  try {
    iface_->startIfStatement_Else();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.startIfStatement_Else");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.startIfStatement_Else");
  }

  return;
}

void AstDumperProcessor::process_endtIfStatement_Else(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.endtIfStatement_Else", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.endtIfStatement_Else");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.endtIfStatement_Else");
  }

  AstDumper_endtIfStatement_Else_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.endtIfStatement_Else", bytes);
  }

  try {
    iface_->endtIfStatement_Else();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.endtIfStatement_Else");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.endtIfStatement_Else");
  }

  return;
}

void AstDumperProcessor::process_endIfStatement(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.endIfStatement", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.endIfStatement");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.endIfStatement");
  }

  AstDumper_endIfStatement_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.endIfStatement", bytes);
  }

  try {
    iface_->endIfStatement();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.endIfStatement");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.endIfStatement");
  }

  return;
}

void AstDumperProcessor::process_startStmtExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.startStmtExpression", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.startStmtExpression");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.startStmtExpression");
  }

  AstDumper_startStmtExpression_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.startStmtExpression", bytes);
  }

  try {
    iface_->startStmtExpression();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.startStmtExpression");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.startStmtExpression");
  }

  return;
}

void AstDumperProcessor::process_endStmtExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.endStmtExpression", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.endStmtExpression");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.endStmtExpression");
  }

  AstDumper_endStmtExpression_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.endStmtExpression", bytes);
  }

  try {
    iface_->endStmtExpression();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.endStmtExpression");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.endStmtExpression");
  }

  return;
}

void AstDumperProcessor::process_startExpressionList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.startExpressionList", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.startExpressionList");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.startExpressionList");
  }

  AstDumper_startExpressionList_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.startExpressionList", bytes);
  }

  try {
    iface_->startExpressionList();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.startExpressionList");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.startExpressionList");
  }

  return;
}

void AstDumperProcessor::process_startCallExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.startCallExpression", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.startCallExpression");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.startCallExpression");
  }

  AstDumper_startCallExpression_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.startCallExpression", bytes);
  }

  try {
    iface_->startCallExpression(args.call);
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.startCallExpression");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.startCallExpression");
  }

  return;
}

void AstDumperProcessor::process_startAgumentList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.startAgumentList", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.startAgumentList");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.startAgumentList");
  }

  AstDumper_startAgumentList_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.startAgumentList", bytes);
  }

  try {
    iface_->startAgumentList();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.startAgumentList");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.startAgumentList");
  }

  return;
}

void AstDumperProcessor::process_endAgumentList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.endAgumentList", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.endAgumentList");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.endAgumentList");
  }

  AstDumper_endAgumentList_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.endAgumentList", bytes);
  }

  try {
    iface_->endAgumentList();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.endAgumentList");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.endAgumentList");
  }

  return;
}

void AstDumperProcessor::process_endCallExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.endCallExpression", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.endCallExpression");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.endCallExpression");
  }

  AstDumper_endCallExpression_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.endCallExpression", bytes);
  }

  try {
    iface_->endCallExpression();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.endCallExpression");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.endCallExpression");
  }

  return;
}

void AstDumperProcessor::process_startBinaryExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.startBinaryExpression", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.startBinaryExpression");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.startBinaryExpression");
  }

  AstDumper_startBinaryExpression_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.startBinaryExpression", bytes);
  }

  try {
    iface_->startBinaryExpression(args.op);
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.startBinaryExpression");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.startBinaryExpression");
  }

  return;
}

void AstDumperProcessor::process_endBinaryExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.endBinaryExpression", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.endBinaryExpression");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.endBinaryExpression");
  }

  AstDumper_endBinaryExpression_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.endBinaryExpression", bytes);
  }

  try {
    iface_->endBinaryExpression();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.endBinaryExpression");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.endBinaryExpression");
  }

  return;
}

void AstDumperProcessor::process_startInstanceOfExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.startInstanceOfExpression", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.startInstanceOfExpression");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.startInstanceOfExpression");
  }

  AstDumper_startInstanceOfExpression_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.startInstanceOfExpression", bytes);
  }

  try {
    iface_->startInstanceOfExpression();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.startInstanceOfExpression");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.startInstanceOfExpression");
  }

  return;
}

void AstDumperProcessor::process_endInstanceOfExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.endInstanceOfExpression", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.endInstanceOfExpression");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.endInstanceOfExpression");
  }

  AstDumper_endInstanceOfExpression_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.endInstanceOfExpression", bytes);
  }

  try {
    iface_->endInstanceOfExpression();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.endInstanceOfExpression");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.endInstanceOfExpression");
  }

  return;
}

void AstDumperProcessor::process_startIsOperator(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.startIsOperator", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.startIsOperator");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.startIsOperator");
  }

  AstDumper_startIsOperator_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.startIsOperator", bytes);
  }

  try {
    iface_->startIsOperator();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.startIsOperator");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.startIsOperator");
  }

  return;
}

void AstDumperProcessor::process_endIsOperator(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.endIsOperator", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.endIsOperator");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.endIsOperator");
  }

  AstDumper_endIsOperator_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.endIsOperator", bytes);
  }

  try {
    iface_->endIsOperator();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.endIsOperator");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.endIsOperator");
  }

  return;
}

void AstDumperProcessor::process_startUnaryExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.startUnaryExpression", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.startUnaryExpression");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.startUnaryExpression");
  }

  AstDumper_startUnaryExpression_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.startUnaryExpression", bytes);
  }

  try {
    iface_->startUnaryExpression(args.op);
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.startUnaryExpression");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.startUnaryExpression");
  }

  return;
}

void AstDumperProcessor::process_endUnaryExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.endUnaryExpression", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.endUnaryExpression");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.endUnaryExpression");
  }

  AstDumper_endUnaryExpression_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.endUnaryExpression", bytes);
  }

  try {
    iface_->endUnaryExpression();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.endUnaryExpression");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.endUnaryExpression");
  }

  return;
}

void AstDumperProcessor::process_startVariableDeclare(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.startVariableDeclare", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.startVariableDeclare");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.startVariableDeclare");
  }

  AstDumper_startVariableDeclare_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.startVariableDeclare", bytes);
  }

  try {
    iface_->startVariableDeclare(args.name, args.type);
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.startVariableDeclare");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.startVariableDeclare");
  }

  return;
}

void AstDumperProcessor::process_endVariableDeclare(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.endVariableDeclare", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.endVariableDeclare");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.endVariableDeclare");
  }

  AstDumper_endVariableDeclare_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.endVariableDeclare", bytes);
  }

  try {
    iface_->endVariableDeclare();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.endVariableDeclare");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.endVariableDeclare");
  }

  return;
}

void AstDumperProcessor::process_startAssignment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.startAssignment", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.startAssignment");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.startAssignment");
  }

  AstDumper_startAssignment_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.startAssignment", bytes);
  }

  try {
    iface_->startAssignment();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.startAssignment");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.startAssignment");
  }

  return;
}

void AstDumperProcessor::process_endAssignment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.endAssignment", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.endAssignment");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.endAssignment");
  }

  AstDumper_endAssignment_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.endAssignment", bytes);
  }

  try {
    iface_->endAssignment();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.endAssignment");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.endAssignment");
  }

  return;
}

void AstDumperProcessor::process_identifierExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.identifierExpression", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.identifierExpression");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.identifierExpression");
  }

  AstDumper_identifierExpression_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.identifierExpression", bytes);
  }

  try {
    iface_->identifierExpression(args.id);
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.identifierExpression");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.identifierExpression");
  }

  return;
}

void AstDumperProcessor::process_literalStringExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.literalStringExpression", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.literalStringExpression");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.literalStringExpression");
  }

  AstDumper_literalStringExpression_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.literalStringExpression", bytes);
  }

  try {
    iface_->literalStringExpression(args.str);
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.literalStringExpression");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.literalStringExpression");
  }

  return;
}

void AstDumperProcessor::process_literalNumberExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.literalNumberExpression", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.literalNumberExpression");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.literalNumberExpression");
  }

  AstDumper_literalNumberExpression_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.literalNumberExpression", bytes);
  }

  try {
    iface_->literalNumberExpression(args.str);
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.literalNumberExpression");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.literalNumberExpression");
  }

  return;
}

void AstDumperProcessor::process_literalBooleanExpression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.literalBooleanExpression", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.literalBooleanExpression");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.literalBooleanExpression");
  }

  AstDumper_literalBooleanExpression_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.literalBooleanExpression", bytes);
  }

  try {
    iface_->literalBooleanExpression(args.str);
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.literalBooleanExpression");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.literalBooleanExpression");
  }

  return;
}

void AstDumperProcessor::process_endExpressionList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.endExpressionList", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.endExpressionList");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.endExpressionList");
  }

  AstDumper_endExpressionList_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.endExpressionList", bytes);
  }

  try {
    iface_->endExpressionList();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.endExpressionList");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.endExpressionList");
  }

  return;
}

void AstDumperProcessor::process_addImport(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.addImport", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.addImport");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.addImport");
  }

  AstDumper_addImport_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.addImport", bytes);
  }

  try {
    iface_->addImport(args.packages);
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.addImport");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.addImport");
  }

  return;
}

void AstDumperProcessor::process_startStmtList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.startStmtList", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.startStmtList");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.startStmtList");
  }

  AstDumper_startStmtList_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.startStmtList", bytes);
  }

  try {
    iface_->startStmtList();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.startStmtList");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.startStmtList");
  }

  return;
}

void AstDumperProcessor::process_endStmtList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.endStmtList", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.endStmtList");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.endStmtList");
  }

  AstDumper_endStmtList_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.endStmtList", bytes);
  }

  try {
    iface_->endStmtList();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.endStmtList");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.endStmtList");
  }

  return;
}

void AstDumperProcessor::process_startClassDefine(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.startClassDefine", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.startClassDefine");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.startClassDefine");
  }

  AstDumper_startClassDefine_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.startClassDefine", bytes);
  }

  try {
    iface_->startClassDefine(args.class_define);
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.startClassDefine");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.startClassDefine");
  }

  return;
}

void AstDumperProcessor::process_startClassStmt(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.startClassStmt", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.startClassStmt");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.startClassStmt");
  }

  AstDumper_startClassStmt_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.startClassStmt", bytes);
  }

  try {
    iface_->startClassStmt();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.startClassStmt");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.startClassStmt");
  }

  return;
}

void AstDumperProcessor::process_endClassStmt(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.endClassStmt", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.endClassStmt");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.endClassStmt");
  }

  AstDumper_endClassStmt_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.endClassStmt", bytes);
  }

  try {
    iface_->endClassStmt();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.endClassStmt");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.endClassStmt");
  }

  return;
}

void AstDumperProcessor::process_endClassDefine(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.endClassDefine", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.endClassDefine");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.endClassDefine");
  }

  AstDumper_endClassDefine_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.endClassDefine", bytes);
  }

  try {
    iface_->endClassDefine();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.endClassDefine");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.endClassDefine");
  }

  return;
}

void AstDumperProcessor::process_startAttributeList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.startAttributeList", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.startAttributeList");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.startAttributeList");
  }

  AstDumper_startAttributeList_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.startAttributeList", bytes);
  }

  try {
    iface_->startAttributeList();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.startAttributeList");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.startAttributeList");
  }

  return;
}

void AstDumperProcessor::process_endAttributelist(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (eventHandler_.get() != NULL) {
    ctx = eventHandler_->getContext("AstDumper.endAttributelist", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(eventHandler_.get(), ctx, "AstDumper.endAttributelist");

  if (eventHandler_.get() != NULL) {
    eventHandler_->preRead(ctx, "AstDumper.endAttributelist");
  }

  AstDumper_endAttributelist_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (eventHandler_.get() != NULL) {
    eventHandler_->postRead(ctx, "AstDumper.endAttributelist", bytes);
  }

  try {
    iface_->endAttributelist();
  } catch (const std::exception& e) {
    if (eventHandler_.get() != NULL) {
      eventHandler_->handlerError(ctx, "AstDumper.endAttributelist");
    }
    return;
  }

  if (eventHandler_.get() != NULL) {
    eventHandler_->asyncComplete(ctx, "AstDumper.endAttributelist");
  }

  return;
}

}}} // namespace

